//
// File generated by rootcint at Thu Sep 25 12:07:46 2014

// Do NOT change. Changes will be lost next time file is generated
//

#define R__DICTIONARY_FILENAME testProjectDict
#include "RConfig.h" //rootcint 4834
#if !defined(R__ACCESS_IN_SYMBOL)
//Break the privacy of classes -- Disabled for the moment
#define private public
#define protected public
#endif

// Since CINT ignores the std namespace, we need to do so in this file.
namespace std {} using namespace std;
#include "testProjectDict.h"

#include "TCollectionProxyInfo.h"
#include "TClass.h"
#include "TBuffer.h"
#include "TMemberInspector.h"
#include "TError.h"

#ifndef G__ROOT
#define G__ROOT
#endif

#include "RtypesImp.h"
#include "TIsAProxy.h"
#include "TFileMergeInfo.h"

// START OF SHADOWS

namespace ROOT {
   namespace Shadow {
      #if !(defined(R__ACCESS_IN_SYMBOL) || defined(R__USE_SHADOW_CLASS))
      typedef ::TCElectron TCElectron;
      #else
      class TCElectron  :  public ::TCEGamma {
         public:
         //friend XX;
         #if !(defined(R__ACCESS_IN_SYMBOL) || defined(R__USE_SHADOW_CLASS))
         typedef ::TCElectron::HitInfo HitInfo;
         #else
         class HitInfo  {
            public:
            //friend XX;
            // To force the creation of a virtual table, throw just in case.
            virtual ~HitInfo() throw() {};
            int Layer; //
            bool ValidFilter; //
            bool PixelFilter; //
            bool BarrelPixelFilter; //
            bool MuonFilter; //
            bool StripFilter; //
            bool TrackerFilter; //
         };
         #endif

         // To force the creation of a virtual table, throw just in case.
         virtual ~TCElectron() throw() {};
      };
      #endif

      #if !(defined(R__ACCESS_IN_SYMBOL) || defined(R__USE_SHADOW_CLASS))
      typedef ::TCEGamma TCEGamma;
      #else
      class TCEGamma  :  public ::TCPhysObject {
         public:
         //friend XX;
         #if !(defined(R__ACCESS_IN_SYMBOL) || defined(R__USE_SHADOW_CLASS))
         typedef ::TCEGamma::CrystalInfo CrystalInfo;
         #else
         class CrystalInfo  {
            public:
            //friend XX;
            // To force the creation of a virtual table, throw just in case.
            virtual ~CrystalInfo() throw() {};
            int rawId; //
            int ieta; //
            int iphi; //
            double energy; //
            double time; //
            double timeErr; //
            int recoFlag; //
         };
         #endif

         // To force the creation of a virtual table, throw just in case.
         virtual ~TCEGamma() throw() {};
      };
      #endif

   } // of namespace Shadow
} // of namespace ROOT
// END OF SHADOWS

namespace ROOT {
   void TCMET_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new_TCMET(void *p = 0);
   static void *newArray_TCMET(Long_t size, void *p);
   static void delete_TCMET(void *p);
   static void deleteArray_TCMET(void *p);
   static void destruct_TCMET(void *p);

   // Function generating the singleton type initializer
   static TGenericClassInfo *GenerateInitInstanceLocal(const ::TCMET*)
   {
      ::TCMET *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::TCMET >(0);
      static ::ROOT::TGenericClassInfo 
         instance("TCMET", ::TCMET::Class_Version(), "./TCMET.h", 14,
                  typeid(::TCMET), DefineBehavior(ptr, ptr),
                  &::TCMET::Dictionary, isa_proxy, 4,
                  sizeof(::TCMET) );
      instance.SetNew(&new_TCMET);
      instance.SetNewArray(&newArray_TCMET);
      instance.SetDelete(&delete_TCMET);
      instance.SetDeleteArray(&deleteArray_TCMET);
      instance.SetDestructor(&destruct_TCMET);
      return &instance;
   }
   TGenericClassInfo *GenerateInitInstance(const ::TCMET*)
   {
      return GenerateInitInstanceLocal((::TCMET*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::TCMET*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOT

namespace ROOT {
   void TCJet_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new_TCJet(void *p = 0);
   static void *newArray_TCJet(Long_t size, void *p);
   static void delete_TCJet(void *p);
   static void deleteArray_TCJet(void *p);
   static void destruct_TCJet(void *p);

   // Function generating the singleton type initializer
   static TGenericClassInfo *GenerateInitInstanceLocal(const ::TCJet*)
   {
      ::TCJet *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::TCJet >(0);
      static ::ROOT::TGenericClassInfo 
         instance("TCJet", ::TCJet::Class_Version(), "./TCJet.h", 14,
                  typeid(::TCJet), DefineBehavior(ptr, ptr),
                  &::TCJet::Dictionary, isa_proxy, 4,
                  sizeof(::TCJet) );
      instance.SetNew(&new_TCJet);
      instance.SetNewArray(&newArray_TCJet);
      instance.SetDelete(&delete_TCJet);
      instance.SetDeleteArray(&deleteArray_TCJet);
      instance.SetDestructor(&destruct_TCJet);
      return &instance;
   }
   TGenericClassInfo *GenerateInitInstance(const ::TCJet*)
   {
      return GenerateInitInstanceLocal((::TCJet*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::TCJet*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOT

namespace ROOT {
   void TCPhysObject_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new_TCPhysObject(void *p = 0);
   static void *newArray_TCPhysObject(Long_t size, void *p);
   static void delete_TCPhysObject(void *p);
   static void deleteArray_TCPhysObject(void *p);
   static void destruct_TCPhysObject(void *p);

   // Function generating the singleton type initializer
   static TGenericClassInfo *GenerateInitInstanceLocal(const ::TCPhysObject*)
   {
      ::TCPhysObject *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::TCPhysObject >(0);
      static ::ROOT::TGenericClassInfo 
         instance("TCPhysObject", ::TCPhysObject::Class_Version(), "./TCPhysObject.h", 18,
                  typeid(::TCPhysObject), DefineBehavior(ptr, ptr),
                  &::TCPhysObject::Dictionary, isa_proxy, 4,
                  sizeof(::TCPhysObject) );
      instance.SetNew(&new_TCPhysObject);
      instance.SetNewArray(&newArray_TCPhysObject);
      instance.SetDelete(&delete_TCPhysObject);
      instance.SetDeleteArray(&deleteArray_TCPhysObject);
      instance.SetDestructor(&destruct_TCPhysObject);
      return &instance;
   }
   TGenericClassInfo *GenerateInitInstance(const ::TCPhysObject*)
   {
      return GenerateInitInstanceLocal((::TCPhysObject*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::TCPhysObject*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOT

namespace ROOT {
   void TCElectron_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new_TCElectron(void *p = 0);
   static void *newArray_TCElectron(Long_t size, void *p);
   static void delete_TCElectron(void *p);
   static void deleteArray_TCElectron(void *p);
   static void destruct_TCElectron(void *p);

   // Function generating the singleton type initializer
   static TGenericClassInfo *GenerateInitInstanceLocal(const ::TCElectron*)
   {
      ::TCElectron *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::TCElectron >(0);
      static ::ROOT::TGenericClassInfo 
         instance("TCElectron", ::TCElectron::Class_Version(), "./TCElectron.h", 18,
                  typeid(::TCElectron), DefineBehavior(ptr, ptr),
                  &::TCElectron::Dictionary, isa_proxy, 4,
                  sizeof(::TCElectron) );
      instance.SetNew(&new_TCElectron);
      instance.SetNewArray(&newArray_TCElectron);
      instance.SetDelete(&delete_TCElectron);
      instance.SetDeleteArray(&deleteArray_TCElectron);
      instance.SetDestructor(&destruct_TCElectron);
      return &instance;
   }
   TGenericClassInfo *GenerateInitInstance(const ::TCElectron*)
   {
      return GenerateInitInstanceLocal((::TCElectron*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::TCElectron*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOT

namespace ROOT {
   void TCEGamma_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new_TCEGamma(void *p = 0);
   static void *newArray_TCEGamma(Long_t size, void *p);
   static void delete_TCEGamma(void *p);
   static void deleteArray_TCEGamma(void *p);
   static void destruct_TCEGamma(void *p);

   // Function generating the singleton type initializer
   static TGenericClassInfo *GenerateInitInstanceLocal(const ::TCEGamma*)
   {
      ::TCEGamma *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::TCEGamma >(0);
      static ::ROOT::TGenericClassInfo 
         instance("TCEGamma", ::TCEGamma::Class_Version(), "./TCEGamma.h", 17,
                  typeid(::TCEGamma), DefineBehavior(ptr, ptr),
                  &::TCEGamma::Dictionary, isa_proxy, 4,
                  sizeof(::TCEGamma) );
      instance.SetNew(&new_TCEGamma);
      instance.SetNewArray(&newArray_TCEGamma);
      instance.SetDelete(&delete_TCEGamma);
      instance.SetDeleteArray(&deleteArray_TCEGamma);
      instance.SetDestructor(&destruct_TCEGamma);
      return &instance;
   }
   TGenericClassInfo *GenerateInitInstance(const ::TCEGamma*)
   {
      return GenerateInitInstanceLocal((::TCEGamma*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::TCEGamma*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOT

namespace ROOT {
   void TCEGammacLcLCrystalInfo_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void TCEGammacLcLCrystalInfo_Dictionary();
   static void *new_TCEGammacLcLCrystalInfo(void *p = 0);
   static void *newArray_TCEGammacLcLCrystalInfo(Long_t size, void *p);
   static void delete_TCEGammacLcLCrystalInfo(void *p);
   static void deleteArray_TCEGammacLcLCrystalInfo(void *p);
   static void destruct_TCEGammacLcLCrystalInfo(void *p);

   // Function generating the singleton type initializer
   static TGenericClassInfo *GenerateInitInstanceLocal(const ::TCEGamma::CrystalInfo*)
   {
      // Make sure the shadow class has the right sizeof
      R__ASSERT(sizeof(::TCEGamma::CrystalInfo) == sizeof(::ROOT::Shadow::TCEGamma::CrystalInfo));
      ::TCEGamma::CrystalInfo *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TIsAProxy(typeid(::TCEGamma::CrystalInfo),0);
      static ::ROOT::TGenericClassInfo 
         instance("TCEGamma::CrystalInfo", "./TCEGamma.h", 25,
                  typeid(::TCEGamma::CrystalInfo), DefineBehavior(ptr, ptr),
                  &TCEGammacLcLCrystalInfo_ShowMembers, &TCEGammacLcLCrystalInfo_Dictionary, isa_proxy, 4,
                  sizeof(::TCEGamma::CrystalInfo) );
      instance.SetNew(&new_TCEGammacLcLCrystalInfo);
      instance.SetNewArray(&newArray_TCEGammacLcLCrystalInfo);
      instance.SetDelete(&delete_TCEGammacLcLCrystalInfo);
      instance.SetDeleteArray(&deleteArray_TCEGammacLcLCrystalInfo);
      instance.SetDestructor(&destruct_TCEGammacLcLCrystalInfo);
      return &instance;
   }
   TGenericClassInfo *GenerateInitInstance(const ::TCEGamma::CrystalInfo*)
   {
      return GenerateInitInstanceLocal((::TCEGamma::CrystalInfo*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::TCEGamma::CrystalInfo*)0x0); R__UseDummy(_R__UNIQUE_(Init));

   // Dictionary for non-ClassDef classes
   static void TCEGammacLcLCrystalInfo_Dictionary() {
      ::ROOT::GenerateInitInstanceLocal((const ::TCEGamma::CrystalInfo*)0x0)->GetClass();
   }

} // end of namespace ROOT

namespace ROOT {
   void TCElectroncLcLHitInfo_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void TCElectroncLcLHitInfo_Dictionary();
   static void *new_TCElectroncLcLHitInfo(void *p = 0);
   static void *newArray_TCElectroncLcLHitInfo(Long_t size, void *p);
   static void delete_TCElectroncLcLHitInfo(void *p);
   static void deleteArray_TCElectroncLcLHitInfo(void *p);
   static void destruct_TCElectroncLcLHitInfo(void *p);

   // Function generating the singleton type initializer
   static TGenericClassInfo *GenerateInitInstanceLocal(const ::TCElectron::HitInfo*)
   {
      // Make sure the shadow class has the right sizeof
      R__ASSERT(sizeof(::TCElectron::HitInfo) == sizeof(::ROOT::Shadow::TCElectron::HitInfo));
      ::TCElectron::HitInfo *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TIsAProxy(typeid(::TCElectron::HitInfo),0);
      static ::ROOT::TGenericClassInfo 
         instance("TCElectron::HitInfo", "./TCElectron.h", 26,
                  typeid(::TCElectron::HitInfo), DefineBehavior(ptr, ptr),
                  &TCElectroncLcLHitInfo_ShowMembers, &TCElectroncLcLHitInfo_Dictionary, isa_proxy, 4,
                  sizeof(::TCElectron::HitInfo) );
      instance.SetNew(&new_TCElectroncLcLHitInfo);
      instance.SetNewArray(&newArray_TCElectroncLcLHitInfo);
      instance.SetDelete(&delete_TCElectroncLcLHitInfo);
      instance.SetDeleteArray(&deleteArray_TCElectroncLcLHitInfo);
      instance.SetDestructor(&destruct_TCElectroncLcLHitInfo);
      return &instance;
   }
   TGenericClassInfo *GenerateInitInstance(const ::TCElectron::HitInfo*)
   {
      return GenerateInitInstanceLocal((::TCElectron::HitInfo*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::TCElectron::HitInfo*)0x0); R__UseDummy(_R__UNIQUE_(Init));

   // Dictionary for non-ClassDef classes
   static void TCElectroncLcLHitInfo_Dictionary() {
      ::ROOT::GenerateInitInstanceLocal((const ::TCElectron::HitInfo*)0x0)->GetClass();
   }

} // end of namespace ROOT

namespace ROOT {
   void TCMuon_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new_TCMuon(void *p = 0);
   static void *newArray_TCMuon(Long_t size, void *p);
   static void delete_TCMuon(void *p);
   static void deleteArray_TCMuon(void *p);
   static void destruct_TCMuon(void *p);

   // Function generating the singleton type initializer
   static TGenericClassInfo *GenerateInitInstanceLocal(const ::TCMuon*)
   {
      ::TCMuon *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::TCMuon >(0);
      static ::ROOT::TGenericClassInfo 
         instance("TCMuon", ::TCMuon::Class_Version(), "./TCMuon.h", 14,
                  typeid(::TCMuon), DefineBehavior(ptr, ptr),
                  &::TCMuon::Dictionary, isa_proxy, 4,
                  sizeof(::TCMuon) );
      instance.SetNew(&new_TCMuon);
      instance.SetNewArray(&newArray_TCMuon);
      instance.SetDelete(&delete_TCMuon);
      instance.SetDeleteArray(&deleteArray_TCMuon);
      instance.SetDestructor(&destruct_TCMuon);
      return &instance;
   }
   TGenericClassInfo *GenerateInitInstance(const ::TCMuon*)
   {
      return GenerateInitInstanceLocal((::TCMuon*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::TCMuon*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOT

namespace ROOT {
   void TCPhoton_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new_TCPhoton(void *p = 0);
   static void *newArray_TCPhoton(Long_t size, void *p);
   static void delete_TCPhoton(void *p);
   static void deleteArray_TCPhoton(void *p);
   static void destruct_TCPhoton(void *p);

   // Function generating the singleton type initializer
   static TGenericClassInfo *GenerateInitInstanceLocal(const ::TCPhoton*)
   {
      ::TCPhoton *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::TCPhoton >(0);
      static ::ROOT::TGenericClassInfo 
         instance("TCPhoton", ::TCPhoton::Class_Version(), "./TCPhoton.h", 14,
                  typeid(::TCPhoton), DefineBehavior(ptr, ptr),
                  &::TCPhoton::Dictionary, isa_proxy, 4,
                  sizeof(::TCPhoton) );
      instance.SetNew(&new_TCPhoton);
      instance.SetNewArray(&newArray_TCPhoton);
      instance.SetDelete(&delete_TCPhoton);
      instance.SetDeleteArray(&deleteArray_TCPhoton);
      instance.SetDestructor(&destruct_TCPhoton);
      return &instance;
   }
   TGenericClassInfo *GenerateInitInstance(const ::TCPhoton*)
   {
      return GenerateInitInstanceLocal((::TCPhoton*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::TCPhoton*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOT

namespace ROOT {
   void TCGenJet_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new_TCGenJet(void *p = 0);
   static void *newArray_TCGenJet(Long_t size, void *p);
   static void delete_TCGenJet(void *p);
   static void deleteArray_TCGenJet(void *p);
   static void destruct_TCGenJet(void *p);

   // Function generating the singleton type initializer
   static TGenericClassInfo *GenerateInitInstanceLocal(const ::TCGenJet*)
   {
      ::TCGenJet *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::TCGenJet >(0);
      static ::ROOT::TGenericClassInfo 
         instance("TCGenJet", ::TCGenJet::Class_Version(), "./TCGenJet.h", 15,
                  typeid(::TCGenJet), DefineBehavior(ptr, ptr),
                  &::TCGenJet::Dictionary, isa_proxy, 4,
                  sizeof(::TCGenJet) );
      instance.SetNew(&new_TCGenJet);
      instance.SetNewArray(&newArray_TCGenJet);
      instance.SetDelete(&delete_TCGenJet);
      instance.SetDeleteArray(&deleteArray_TCGenJet);
      instance.SetDestructor(&destruct_TCGenJet);
      return &instance;
   }
   TGenericClassInfo *GenerateInitInstance(const ::TCGenJet*)
   {
      return GenerateInitInstanceLocal((::TCGenJet*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::TCGenJet*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOT

namespace ROOT {
   void TCGenParticle_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new_TCGenParticle(void *p = 0);
   static void *newArray_TCGenParticle(Long_t size, void *p);
   static void delete_TCGenParticle(void *p);
   static void deleteArray_TCGenParticle(void *p);
   static void destruct_TCGenParticle(void *p);

   // Function generating the singleton type initializer
   static TGenericClassInfo *GenerateInitInstanceLocal(const ::TCGenParticle*)
   {
      ::TCGenParticle *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::TCGenParticle >(0);
      static ::ROOT::TGenericClassInfo 
         instance("TCGenParticle", ::TCGenParticle::Class_Version(), "./TCGenParticle.h", 15,
                  typeid(::TCGenParticle), DefineBehavior(ptr, ptr),
                  &::TCGenParticle::Dictionary, isa_proxy, 4,
                  sizeof(::TCGenParticle) );
      instance.SetNew(&new_TCGenParticle);
      instance.SetNewArray(&newArray_TCGenParticle);
      instance.SetDelete(&delete_TCGenParticle);
      instance.SetDeleteArray(&deleteArray_TCGenParticle);
      instance.SetDestructor(&destruct_TCGenParticle);
      return &instance;
   }
   TGenericClassInfo *GenerateInitInstance(const ::TCGenParticle*)
   {
      return GenerateInitInstanceLocal((::TCGenParticle*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::TCGenParticle*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOT

namespace ROOT {
   void TCTriggerObject_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new_TCTriggerObject(void *p = 0);
   static void *newArray_TCTriggerObject(Long_t size, void *p);
   static void delete_TCTriggerObject(void *p);
   static void deleteArray_TCTriggerObject(void *p);
   static void destruct_TCTriggerObject(void *p);

   // Function generating the singleton type initializer
   static TGenericClassInfo *GenerateInitInstanceLocal(const ::TCTriggerObject*)
   {
      ::TCTriggerObject *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::TCTriggerObject >(0);
      static ::ROOT::TGenericClassInfo 
         instance("TCTriggerObject", ::TCTriggerObject::Class_Version(), "./TCTriggerObject.h", 16,
                  typeid(::TCTriggerObject), DefineBehavior(ptr, ptr),
                  &::TCTriggerObject::Dictionary, isa_proxy, 4,
                  sizeof(::TCTriggerObject) );
      instance.SetNew(&new_TCTriggerObject);
      instance.SetNewArray(&newArray_TCTriggerObject);
      instance.SetDelete(&delete_TCTriggerObject);
      instance.SetDeleteArray(&deleteArray_TCTriggerObject);
      instance.SetDestructor(&destruct_TCTriggerObject);
      return &instance;
   }
   TGenericClassInfo *GenerateInitInstance(const ::TCTriggerObject*)
   {
      return GenerateInitInstanceLocal((::TCTriggerObject*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::TCTriggerObject*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOT

namespace ROOT {
   void TCPrimaryVtx_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new_TCPrimaryVtx(void *p = 0);
   static void *newArray_TCPrimaryVtx(Long_t size, void *p);
   static void delete_TCPrimaryVtx(void *p);
   static void deleteArray_TCPrimaryVtx(void *p);
   static void destruct_TCPrimaryVtx(void *p);

   // Function generating the singleton type initializer
   static TGenericClassInfo *GenerateInitInstanceLocal(const ::TCPrimaryVtx*)
   {
      ::TCPrimaryVtx *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::TCPrimaryVtx >(0);
      static ::ROOT::TGenericClassInfo 
         instance("TCPrimaryVtx", ::TCPrimaryVtx::Class_Version(), "./TCPrimaryVtx.h", 14,
                  typeid(::TCPrimaryVtx), DefineBehavior(ptr, ptr),
                  &::TCPrimaryVtx::Dictionary, isa_proxy, 4,
                  sizeof(::TCPrimaryVtx) );
      instance.SetNew(&new_TCPrimaryVtx);
      instance.SetNewArray(&newArray_TCPrimaryVtx);
      instance.SetDelete(&delete_TCPrimaryVtx);
      instance.SetDeleteArray(&deleteArray_TCPrimaryVtx);
      instance.SetDestructor(&destruct_TCPrimaryVtx);
      return &instance;
   }
   TGenericClassInfo *GenerateInitInstance(const ::TCPrimaryVtx*)
   {
      return GenerateInitInstanceLocal((::TCPrimaryVtx*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::TCPrimaryVtx*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOT

//______________________________________________________________________________
TClass *TCMET::fgIsA = 0;  // static to hold class pointer

//______________________________________________________________________________
const char *TCMET::Class_Name()
{
   return "TCMET";
}

//______________________________________________________________________________
const char *TCMET::ImplFileName()
{
   return ::ROOT::GenerateInitInstanceLocal((const ::TCMET*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int TCMET::ImplFileLine()
{
   return ::ROOT::GenerateInitInstanceLocal((const ::TCMET*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void TCMET::Dictionary()
{
   fgIsA = ::ROOT::GenerateInitInstanceLocal((const ::TCMET*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *TCMET::Class()
{
   if (!fgIsA) fgIsA = ::ROOT::GenerateInitInstanceLocal((const ::TCMET*)0x0)->GetClass();
   return fgIsA;
}

//______________________________________________________________________________
TClass *TCJet::fgIsA = 0;  // static to hold class pointer

//______________________________________________________________________________
const char *TCJet::Class_Name()
{
   return "TCJet";
}

//______________________________________________________________________________
const char *TCJet::ImplFileName()
{
   return ::ROOT::GenerateInitInstanceLocal((const ::TCJet*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int TCJet::ImplFileLine()
{
   return ::ROOT::GenerateInitInstanceLocal((const ::TCJet*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void TCJet::Dictionary()
{
   fgIsA = ::ROOT::GenerateInitInstanceLocal((const ::TCJet*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *TCJet::Class()
{
   if (!fgIsA) fgIsA = ::ROOT::GenerateInitInstanceLocal((const ::TCJet*)0x0)->GetClass();
   return fgIsA;
}

//______________________________________________________________________________
TClass *TCPhysObject::fgIsA = 0;  // static to hold class pointer

//______________________________________________________________________________
const char *TCPhysObject::Class_Name()
{
   return "TCPhysObject";
}

//______________________________________________________________________________
const char *TCPhysObject::ImplFileName()
{
   return ::ROOT::GenerateInitInstanceLocal((const ::TCPhysObject*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int TCPhysObject::ImplFileLine()
{
   return ::ROOT::GenerateInitInstanceLocal((const ::TCPhysObject*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void TCPhysObject::Dictionary()
{
   fgIsA = ::ROOT::GenerateInitInstanceLocal((const ::TCPhysObject*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *TCPhysObject::Class()
{
   if (!fgIsA) fgIsA = ::ROOT::GenerateInitInstanceLocal((const ::TCPhysObject*)0x0)->GetClass();
   return fgIsA;
}

//______________________________________________________________________________
TClass *TCElectron::fgIsA = 0;  // static to hold class pointer

//______________________________________________________________________________
const char *TCElectron::Class_Name()
{
   return "TCElectron";
}

//______________________________________________________________________________
const char *TCElectron::ImplFileName()
{
   return ::ROOT::GenerateInitInstanceLocal((const ::TCElectron*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int TCElectron::ImplFileLine()
{
   return ::ROOT::GenerateInitInstanceLocal((const ::TCElectron*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void TCElectron::Dictionary()
{
   fgIsA = ::ROOT::GenerateInitInstanceLocal((const ::TCElectron*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *TCElectron::Class()
{
   if (!fgIsA) fgIsA = ::ROOT::GenerateInitInstanceLocal((const ::TCElectron*)0x0)->GetClass();
   return fgIsA;
}

//______________________________________________________________________________
TClass *TCEGamma::fgIsA = 0;  // static to hold class pointer

//______________________________________________________________________________
const char *TCEGamma::Class_Name()
{
   return "TCEGamma";
}

//______________________________________________________________________________
const char *TCEGamma::ImplFileName()
{
   return ::ROOT::GenerateInitInstanceLocal((const ::TCEGamma*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int TCEGamma::ImplFileLine()
{
   return ::ROOT::GenerateInitInstanceLocal((const ::TCEGamma*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void TCEGamma::Dictionary()
{
   fgIsA = ::ROOT::GenerateInitInstanceLocal((const ::TCEGamma*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *TCEGamma::Class()
{
   if (!fgIsA) fgIsA = ::ROOT::GenerateInitInstanceLocal((const ::TCEGamma*)0x0)->GetClass();
   return fgIsA;
}

//______________________________________________________________________________
TClass *TCMuon::fgIsA = 0;  // static to hold class pointer

//______________________________________________________________________________
const char *TCMuon::Class_Name()
{
   return "TCMuon";
}

//______________________________________________________________________________
const char *TCMuon::ImplFileName()
{
   return ::ROOT::GenerateInitInstanceLocal((const ::TCMuon*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int TCMuon::ImplFileLine()
{
   return ::ROOT::GenerateInitInstanceLocal((const ::TCMuon*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void TCMuon::Dictionary()
{
   fgIsA = ::ROOT::GenerateInitInstanceLocal((const ::TCMuon*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *TCMuon::Class()
{
   if (!fgIsA) fgIsA = ::ROOT::GenerateInitInstanceLocal((const ::TCMuon*)0x0)->GetClass();
   return fgIsA;
}

//______________________________________________________________________________
TClass *TCPhoton::fgIsA = 0;  // static to hold class pointer

//______________________________________________________________________________
const char *TCPhoton::Class_Name()
{
   return "TCPhoton";
}

//______________________________________________________________________________
const char *TCPhoton::ImplFileName()
{
   return ::ROOT::GenerateInitInstanceLocal((const ::TCPhoton*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int TCPhoton::ImplFileLine()
{
   return ::ROOT::GenerateInitInstanceLocal((const ::TCPhoton*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void TCPhoton::Dictionary()
{
   fgIsA = ::ROOT::GenerateInitInstanceLocal((const ::TCPhoton*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *TCPhoton::Class()
{
   if (!fgIsA) fgIsA = ::ROOT::GenerateInitInstanceLocal((const ::TCPhoton*)0x0)->GetClass();
   return fgIsA;
}

//______________________________________________________________________________
TClass *TCGenJet::fgIsA = 0;  // static to hold class pointer

//______________________________________________________________________________
const char *TCGenJet::Class_Name()
{
   return "TCGenJet";
}

//______________________________________________________________________________
const char *TCGenJet::ImplFileName()
{
   return ::ROOT::GenerateInitInstanceLocal((const ::TCGenJet*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int TCGenJet::ImplFileLine()
{
   return ::ROOT::GenerateInitInstanceLocal((const ::TCGenJet*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void TCGenJet::Dictionary()
{
   fgIsA = ::ROOT::GenerateInitInstanceLocal((const ::TCGenJet*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *TCGenJet::Class()
{
   if (!fgIsA) fgIsA = ::ROOT::GenerateInitInstanceLocal((const ::TCGenJet*)0x0)->GetClass();
   return fgIsA;
}

//______________________________________________________________________________
TClass *TCGenParticle::fgIsA = 0;  // static to hold class pointer

//______________________________________________________________________________
const char *TCGenParticle::Class_Name()
{
   return "TCGenParticle";
}

//______________________________________________________________________________
const char *TCGenParticle::ImplFileName()
{
   return ::ROOT::GenerateInitInstanceLocal((const ::TCGenParticle*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int TCGenParticle::ImplFileLine()
{
   return ::ROOT::GenerateInitInstanceLocal((const ::TCGenParticle*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void TCGenParticle::Dictionary()
{
   fgIsA = ::ROOT::GenerateInitInstanceLocal((const ::TCGenParticle*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *TCGenParticle::Class()
{
   if (!fgIsA) fgIsA = ::ROOT::GenerateInitInstanceLocal((const ::TCGenParticle*)0x0)->GetClass();
   return fgIsA;
}

//______________________________________________________________________________
TClass *TCTriggerObject::fgIsA = 0;  // static to hold class pointer

//______________________________________________________________________________
const char *TCTriggerObject::Class_Name()
{
   return "TCTriggerObject";
}

//______________________________________________________________________________
const char *TCTriggerObject::ImplFileName()
{
   return ::ROOT::GenerateInitInstanceLocal((const ::TCTriggerObject*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int TCTriggerObject::ImplFileLine()
{
   return ::ROOT::GenerateInitInstanceLocal((const ::TCTriggerObject*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void TCTriggerObject::Dictionary()
{
   fgIsA = ::ROOT::GenerateInitInstanceLocal((const ::TCTriggerObject*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *TCTriggerObject::Class()
{
   if (!fgIsA) fgIsA = ::ROOT::GenerateInitInstanceLocal((const ::TCTriggerObject*)0x0)->GetClass();
   return fgIsA;
}

//______________________________________________________________________________
TClass *TCPrimaryVtx::fgIsA = 0;  // static to hold class pointer

//______________________________________________________________________________
const char *TCPrimaryVtx::Class_Name()
{
   return "TCPrimaryVtx";
}

//______________________________________________________________________________
const char *TCPrimaryVtx::ImplFileName()
{
   return ::ROOT::GenerateInitInstanceLocal((const ::TCPrimaryVtx*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int TCPrimaryVtx::ImplFileLine()
{
   return ::ROOT::GenerateInitInstanceLocal((const ::TCPrimaryVtx*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void TCPrimaryVtx::Dictionary()
{
   fgIsA = ::ROOT::GenerateInitInstanceLocal((const ::TCPrimaryVtx*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *TCPrimaryVtx::Class()
{
   if (!fgIsA) fgIsA = ::ROOT::GenerateInitInstanceLocal((const ::TCPrimaryVtx*)0x0)->GetClass();
   return fgIsA;
}

//______________________________________________________________________________
void TCMET::Streamer(TBuffer &R__b)
{
   // Stream an object of class TCMET.

   if (R__b.IsReading()) {
      R__b.ReadClassBuffer(TCMET::Class(),this);
   } else {
      R__b.WriteClassBuffer(TCMET::Class(),this);
   }
}

//______________________________________________________________________________
void TCMET::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class TCMET.
      TClass *R__cl = ::TCMET::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "_genMET", &_genMET);
      R__insp.InspectMember(_genMET, "_genMET.");
      R__insp.Inspect(R__cl, R__insp.GetParent(), "_sumEt", &_sumEt);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "_muonFraction", &_muonFraction);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "_neutralHadronFraction", &_neutralHadronFraction);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "_neutralEMFraction", &_neutralEMFraction);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "_chargedHadronFraction", &_chargedHadronFraction);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "_chargedEMFraction", &_chargedEMFraction);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "_unCorPhi", &_unCorPhi);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "_Significance", &_Significance);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "_SigmaX2", &_SigmaX2);
      TVector2::ShowMembers(R__insp);
}

namespace ROOT {
   // Wrappers around operator new
   static void *new_TCMET(void *p) {
      return  p ? new(p) ::TCMET : new ::TCMET;
   }
   static void *newArray_TCMET(Long_t nElements, void *p) {
      return p ? new(p) ::TCMET[nElements] : new ::TCMET[nElements];
   }
   // Wrapper around operator delete
   static void delete_TCMET(void *p) {
      delete ((::TCMET*)p);
   }
   static void deleteArray_TCMET(void *p) {
      delete [] ((::TCMET*)p);
   }
   static void destruct_TCMET(void *p) {
      typedef ::TCMET current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOT for class ::TCMET

//______________________________________________________________________________
void TCJet::Streamer(TBuffer &R__b)
{
   // Stream an object of class TCJet.

   if (R__b.IsReading()) {
      R__b.ReadClassBuffer(TCJet::Class(),this);
   } else {
      R__b.WriteClassBuffer(TCJet::Class(),this);
   }
}

//______________________________________________________________________________
void TCJet::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class TCJet.
      TClass *R__cl = ::TCJet::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "_id_cut_loose", &_id_cut_loose);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "_id_cut_medium", &_id_cut_medium);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "_id_cut_tight", &_id_cut_tight);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "_id_mva_loose", &_id_mva_loose);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "_id_mva_medium", &_id_mva_medium);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "_id_mva_tight", &_id_mva_tight);
      TCPhysObject::ShowMembers(R__insp);
}

namespace ROOT {
   // Wrappers around operator new
   static void *new_TCJet(void *p) {
      return  p ? new(p) ::TCJet : new ::TCJet;
   }
   static void *newArray_TCJet(Long_t nElements, void *p) {
      return p ? new(p) ::TCJet[nElements] : new ::TCJet[nElements];
   }
   // Wrapper around operator delete
   static void delete_TCJet(void *p) {
      delete ((::TCJet*)p);
   }
   static void deleteArray_TCJet(void *p) {
      delete [] ((::TCJet*)p);
   }
   static void destruct_TCJet(void *p) {
      typedef ::TCJet current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOT for class ::TCJet

//______________________________________________________________________________
void TCPhysObject::Streamer(TBuffer &R__b)
{
   // Stream an object of class TCPhysObject.

   if (R__b.IsReading()) {
      R__b.ReadClassBuffer(TCPhysObject::Class(),this);
   } else {
      R__b.WriteClassBuffer(TCPhysObject::Class(),this);
   }
}

//______________________________________________________________________________
void TCPhysObject::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class TCPhysObject.
      TClass *R__cl = ::TCPhysObject::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "_vtx", &_vtx);
      R__insp.InspectMember(_vtx, "_vtx.");
      R__insp.Inspect(R__cl, R__insp.GetParent(), "_IdMap", (void*)&_IdMap);
      R__insp.InspectMember("vector<std::pair<std::string,float> >", (void*)&_IdMap, "_IdMap.", false);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "_IsoMap", (void*)&_IsoMap);
      R__insp.InspectMember("vector<std::pair<std::string,float> >", (void*)&_IsoMap, "_IsoMap.", false);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "_charge", &_charge);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "_type", (void*)&_type);
      R__insp.InspectMember("string", (void*)&_type, "_type.", false);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "_isPF", &_isPF);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "_isReco", &_isReco);
      TLorentzVector::ShowMembers(R__insp);
}

namespace ROOT {
   // Wrappers around operator new
   static void *new_TCPhysObject(void *p) {
      return  p ? new(p) ::TCPhysObject : new ::TCPhysObject;
   }
   static void *newArray_TCPhysObject(Long_t nElements, void *p) {
      return p ? new(p) ::TCPhysObject[nElements] : new ::TCPhysObject[nElements];
   }
   // Wrapper around operator delete
   static void delete_TCPhysObject(void *p) {
      delete ((::TCPhysObject*)p);
   }
   static void deleteArray_TCPhysObject(void *p) {
      delete [] ((::TCPhysObject*)p);
   }
   static void destruct_TCPhysObject(void *p) {
      typedef ::TCPhysObject current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOT for class ::TCPhysObject

//______________________________________________________________________________
void TCElectron::Streamer(TBuffer &R__b)
{
   // Stream an object of class TCElectron.

   if (R__b.IsReading()) {
      R__b.ReadClassBuffer(TCElectron::Class(),this);
   } else {
      R__b.WriteClassBuffer(TCElectron::Class(),this);
   }
}

//______________________________________________________________________________
void TCElectron::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class TCElectron.
      TClass *R__cl = ::TCElectron::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "_pos", &_pos);
      R__insp.InspectMember(_pos, "_pos.");
      R__insp.Inspect(R__cl, R__insp.GetParent(), "_normChi2gsf", &_normChi2gsf);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "_normChi2kf", &_normChi2kf);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "_ptError", &_ptError);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "_fBrem", &_fBrem);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "_inverseEnergyMomentumDiff", &_inverseEnergyMomentumDiff);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "_EoP", &_EoP);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "_EoPout", &_EoPout);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "_ip3d", &_ip3d);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "_ip3dSig", &_ip3dSig);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "_deltaEtaSeedCluster", &_deltaEtaSeedCluster);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "_deltaPhiSeedCluster", &_deltaPhiSeedCluster);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "_passConvVeto", &_passConvVeto);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "_convMissHits", &_convMissHits);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "_trackerLayersWithMeasurement", &_trackerLayersWithMeasurement);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "_numberOfValidHits", &_numberOfValidHits);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "_numberOfValidPixelHits", &_numberOfValidPixelHits);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "_numberOfValidTrackerHits", &_numberOfValidTrackerHits);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "_numberOfLostPixelHits", &_numberOfLostPixelHits);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "_numberOfLostTrackerHits", &_numberOfLostTrackerHits);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "_effArea", &_effArea);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "_HitMap", (void*)&_HitMap);
      R__insp.InspectMember("vector<TCElectron::HitInfo>", (void*)&_HitMap, "_HitMap.", false);
      TCEGamma::ShowMembers(R__insp);
}

namespace ROOT {
   // Wrappers around operator new
   static void *new_TCElectron(void *p) {
      return  p ? new(p) ::TCElectron : new ::TCElectron;
   }
   static void *newArray_TCElectron(Long_t nElements, void *p) {
      return p ? new(p) ::TCElectron[nElements] : new ::TCElectron[nElements];
   }
   // Wrapper around operator delete
   static void delete_TCElectron(void *p) {
      delete ((::TCElectron*)p);
   }
   static void deleteArray_TCElectron(void *p) {
      delete [] ((::TCElectron*)p);
   }
   static void destruct_TCElectron(void *p) {
      typedef ::TCElectron current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOT for class ::TCElectron

//______________________________________________________________________________
void TCEGamma::Streamer(TBuffer &R__b)
{
   // Stream an object of class TCEGamma.

   if (R__b.IsReading()) {
      R__b.ReadClassBuffer(TCEGamma::Class(),this);
   } else {
      R__b.WriteClassBuffer(TCEGamma::Class(),this);
   }
}

//______________________________________________________________________________
void TCEGamma::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class TCEGamma.
      TClass *R__cl = ::TCEGamma::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "_isEB", &_isEB);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "_isEE", &_isEE);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "_isInGap", &_isInGap);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "_hadOverEm", &_hadOverEm);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "_r9", &_r9);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "_scEta", &_scEta);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "_scPhi", &_scPhi);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "_scDeltaPhi", &_scDeltaPhi);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "_scDeltaEta", &_scDeltaEta);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "_scSigmaIetaIeta", &_scSigmaIetaIeta);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "_scSigmaIetaIphi", &_scSigmaIetaIphi);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "_scSigmaIphiIphi", &_scSigmaIphiIphi);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "_scEtaWidth", &_scEtaWidth);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "_scPhiWidth", &_scPhiWidth);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "_scRawEnergy", &_scRawEnergy);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "_scEnergy", &_scEnergy);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "_scPSEnergy", &_scPSEnergy);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "_preShowerOverRaw", &_preShowerOverRaw);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "_e1x3", &_e1x3);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "_e1x5", &_e1x5);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "_e2x2", &_e2x2);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "_e2x5", &_e2x5);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "_e2x5Max", &_e2x5Max);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "_e5x5", &_e5x5);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "_esEffSigmaRR", (void*)&_esEffSigmaRR);
      R__insp.InspectMember("vector<float>", (void*)&_esEffSigmaRR, "_esEffSigmaRR.", false);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "_pfIsoCharged", &_pfIsoCharged);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "_pfIsoNeutral", &_pfIsoNeutral);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "_pfIsoPhoton", &_pfIsoPhoton);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "_crysVect", (void*)&_crysVect);
      R__insp.InspectMember("vector<TCEGamma::CrystalInfo>", (void*)&_crysVect, "_crysVect.", false);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "_nCrystals", &_nCrystals);
      TCPhysObject::ShowMembers(R__insp);
}

namespace ROOT {
   // Wrappers around operator new
   static void *new_TCEGamma(void *p) {
      return  p ? new(p) ::TCEGamma : new ::TCEGamma;
   }
   static void *newArray_TCEGamma(Long_t nElements, void *p) {
      return p ? new(p) ::TCEGamma[nElements] : new ::TCEGamma[nElements];
   }
   // Wrapper around operator delete
   static void delete_TCEGamma(void *p) {
      delete ((::TCEGamma*)p);
   }
   static void deleteArray_TCEGamma(void *p) {
      delete [] ((::TCEGamma*)p);
   }
   static void destruct_TCEGamma(void *p) {
      typedef ::TCEGamma current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOT for class ::TCEGamma

//______________________________________________________________________________
namespace ROOT {
   void TCEGammacLcLCrystalInfo_ShowMembers(void *obj, TMemberInspector &R__insp)
   {
      // Inspect the data members of an object of class TCEGamma::CrystalInfo.
      typedef ::ROOT::Shadow::TCEGamma::CrystalInfo ShadowClass;
      ShadowClass *sobj = (ShadowClass*)obj;
      if (sobj) { } // Dummy usage just in case there is no datamember.

      TClass *R__cl  = ::ROOT::GenerateInitInstanceLocal((const ::TCEGamma::CrystalInfo*)0x0)->GetClass();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "rawId", &sobj->rawId);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "ieta", &sobj->ieta);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "iphi", &sobj->iphi);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "energy", &sobj->energy);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "time", &sobj->time);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "timeErr", &sobj->timeErr);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "recoFlag", &sobj->recoFlag);
   }

}

namespace ROOT {
   // Wrappers around operator new
   static void *new_TCEGammacLcLCrystalInfo(void *p) {
      return  p ? ::new((::ROOT::TOperatorNewHelper*)p) ::TCEGamma::CrystalInfo : new ::TCEGamma::CrystalInfo;
   }
   static void *newArray_TCEGammacLcLCrystalInfo(Long_t nElements, void *p) {
      return p ? ::new((::ROOT::TOperatorNewHelper*)p) ::TCEGamma::CrystalInfo[nElements] : new ::TCEGamma::CrystalInfo[nElements];
   }
   // Wrapper around operator delete
   static void delete_TCEGammacLcLCrystalInfo(void *p) {
      delete ((::TCEGamma::CrystalInfo*)p);
   }
   static void deleteArray_TCEGammacLcLCrystalInfo(void *p) {
      delete [] ((::TCEGamma::CrystalInfo*)p);
   }
   static void destruct_TCEGammacLcLCrystalInfo(void *p) {
      typedef ::TCEGamma::CrystalInfo current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOT for class ::TCEGamma::CrystalInfo

//______________________________________________________________________________
namespace ROOT {
   void TCElectroncLcLHitInfo_ShowMembers(void *obj, TMemberInspector &R__insp)
   {
      // Inspect the data members of an object of class TCElectron::HitInfo.
      typedef ::ROOT::Shadow::TCElectron::HitInfo ShadowClass;
      ShadowClass *sobj = (ShadowClass*)obj;
      if (sobj) { } // Dummy usage just in case there is no datamember.

      TClass *R__cl  = ::ROOT::GenerateInitInstanceLocal((const ::TCElectron::HitInfo*)0x0)->GetClass();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "Layer", &sobj->Layer);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "ValidFilter", &sobj->ValidFilter);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "PixelFilter", &sobj->PixelFilter);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "BarrelPixelFilter", &sobj->BarrelPixelFilter);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "MuonFilter", &sobj->MuonFilter);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "StripFilter", &sobj->StripFilter);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "TrackerFilter", &sobj->TrackerFilter);
   }

}

namespace ROOT {
   // Wrappers around operator new
   static void *new_TCElectroncLcLHitInfo(void *p) {
      return  p ? ::new((::ROOT::TOperatorNewHelper*)p) ::TCElectron::HitInfo : new ::TCElectron::HitInfo;
   }
   static void *newArray_TCElectroncLcLHitInfo(Long_t nElements, void *p) {
      return p ? ::new((::ROOT::TOperatorNewHelper*)p) ::TCElectron::HitInfo[nElements] : new ::TCElectron::HitInfo[nElements];
   }
   // Wrapper around operator delete
   static void delete_TCElectroncLcLHitInfo(void *p) {
      delete ((::TCElectron::HitInfo*)p);
   }
   static void deleteArray_TCElectroncLcLHitInfo(void *p) {
      delete [] ((::TCElectron::HitInfo*)p);
   }
   static void destruct_TCElectroncLcLHitInfo(void *p) {
      typedef ::TCElectron::HitInfo current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOT for class ::TCElectron::HitInfo

//______________________________________________________________________________
void TCMuon::Streamer(TBuffer &R__b)
{
   // Stream an object of class TCMuon.

   if (R__b.IsReading()) {
      R__b.ReadClassBuffer(TCMuon::Class(),this);
   } else {
      R__b.WriteClassBuffer(TCMuon::Class(),this);
   }
}

//______________________________________________________________________________
void TCMuon::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class TCMuon.
      TClass *R__cl = ::TCMuon::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "_ptError", &_ptError);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "_isPF", &_isPF);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "_isTRK", &_isTRK);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "_isGLB", &_isGLB);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "_isSoft", &_isSoft);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "_isTight", &_isTight);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "_isGood", &_isGood);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "_isGoodLoose", &_isGoodLoose);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "_caloComp", &_caloComp);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "_segComp", &_segComp);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "_numberOfMatches", &_numberOfMatches);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "_numberOfMatchedStations", &_numberOfMatchedStations);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "_numberOfValidPixelHits", &_numberOfValidPixelHits);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "_numberOfValidTrackerHits", &_numberOfValidTrackerHits);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "_numberOfLostPixelHits", &_numberOfLostPixelHits);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "_numberOfLostTrackerHits", &_numberOfLostTrackerHits);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "_numberOfValidMuonHits", &_numberOfValidMuonHits);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "_trackLayersWithMeasurement", &_trackLayersWithMeasurement);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "_pixelLayersWithMeasurement", &_pixelLayersWithMeasurement);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "_normalizedChi2", &_normalizedChi2);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "_normalizedChi2_tracker", &_normalizedChi2_tracker);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "_pfIsoCharged", &_pfIsoCharged);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "_pfIsoNeutral", &_pfIsoNeutral);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "_pfIsoPhoton", &_pfIsoPhoton);
      TCPhysObject::ShowMembers(R__insp);
}

namespace ROOT {
   // Wrappers around operator new
   static void *new_TCMuon(void *p) {
      return  p ? new(p) ::TCMuon : new ::TCMuon;
   }
   static void *newArray_TCMuon(Long_t nElements, void *p) {
      return p ? new(p) ::TCMuon[nElements] : new ::TCMuon[nElements];
   }
   // Wrapper around operator delete
   static void delete_TCMuon(void *p) {
      delete ((::TCMuon*)p);
   }
   static void deleteArray_TCMuon(void *p) {
      delete [] ((::TCMuon*)p);
   }
   static void destruct_TCMuon(void *p) {
      typedef ::TCMuon current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOT for class ::TCMuon

//______________________________________________________________________________
void TCPhoton::Streamer(TBuffer &R__b)
{
   // Stream an object of class TCPhoton.

   if (R__b.IsReading()) {
      R__b.ReadClassBuffer(TCPhoton::Class(),this);
   } else {
      R__b.WriteClassBuffer(TCPhoton::Class(),this);
   }
}

//______________________________________________________________________________
void TCPhoton::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class TCPhoton.
      TClass *R__cl = ::TCPhoton::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "_trackVeto", &_trackVeto);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "_convVeto", &_convVeto);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "_mipchi2", &_mipchi2);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "_miptoten", &_miptoten);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "_mipslope", &_mipslope);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "_mipintercept", &_mipintercept);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "_mipnhitcone", &_mipnhitcone);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "_mipishalo", &_mipishalo);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "_roundness", &_roundness);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "_angle", &_angle);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "_smin", &_smin);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "_smaj", &_smaj);
      TCEGamma::ShowMembers(R__insp);
}

namespace ROOT {
   // Wrappers around operator new
   static void *new_TCPhoton(void *p) {
      return  p ? new(p) ::TCPhoton : new ::TCPhoton;
   }
   static void *newArray_TCPhoton(Long_t nElements, void *p) {
      return p ? new(p) ::TCPhoton[nElements] : new ::TCPhoton[nElements];
   }
   // Wrapper around operator delete
   static void delete_TCPhoton(void *p) {
      delete ((::TCPhoton*)p);
   }
   static void deleteArray_TCPhoton(void *p) {
      delete [] ((::TCPhoton*)p);
   }
   static void destruct_TCPhoton(void *p) {
      typedef ::TCPhoton current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOT for class ::TCPhoton

//______________________________________________________________________________
void TCGenJet::Streamer(TBuffer &R__b)
{
   // Stream an object of class TCGenJet.

   if (R__b.IsReading()) {
      R__b.ReadClassBuffer(TCGenJet::Class(),this);
   } else {
      R__b.WriteClassBuffer(TCGenJet::Class(),this);
   }
}

//______________________________________________________________________________
void TCGenJet::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class TCGenJet.
      TClass *R__cl = ::TCGenJet::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "_progenitorP4", &_progenitorP4);
      R__insp.InspectMember(_progenitorP4, "_progenitorP4.");
      R__insp.Inspect(R__cl, R__insp.GetParent(), "_hadEnergy", &_hadEnergy);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "_emEnergy", &_emEnergy);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "_invEnergy", &_invEnergy);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "_auxEnergy", &_auxEnergy);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "_numConstit", &_numConstit);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "_numChPart", &_numChPart);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "_jetFlavor", &_jetFlavor);
      TCPhysObject::ShowMembers(R__insp);
}

namespace ROOT {
   // Wrappers around operator new
   static void *new_TCGenJet(void *p) {
      return  p ? new(p) ::TCGenJet : new ::TCGenJet;
   }
   static void *newArray_TCGenJet(Long_t nElements, void *p) {
      return p ? new(p) ::TCGenJet[nElements] : new ::TCGenJet[nElements];
   }
   // Wrapper around operator delete
   static void delete_TCGenJet(void *p) {
      delete ((::TCGenJet*)p);
   }
   static void deleteArray_TCGenJet(void *p) {
      delete [] ((::TCGenJet*)p);
   }
   static void destruct_TCGenJet(void *p) {
      typedef ::TCGenJet current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOT for class ::TCGenJet

//______________________________________________________________________________
void TCGenParticle::Streamer(TBuffer &R__b)
{
   // Stream an object of class TCGenParticle.

   if (R__b.IsReading()) {
      R__b.ReadClassBuffer(TCGenParticle::Class(),this);
   } else {
      R__b.WriteClassBuffer(TCGenParticle::Class(),this);
   }
}

//______________________________________________________________________________
void TCGenParticle::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class TCGenParticle.
      TClass *R__cl = ::TCGenParticle::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*_mother", &_mother);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "_PDGID", &_PDGID);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "_status", &_status);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "_isParton", &_isParton);
      TCPhysObject::ShowMembers(R__insp);
}

namespace ROOT {
   // Wrappers around operator new
   static void *new_TCGenParticle(void *p) {
      return  p ? new(p) ::TCGenParticle : new ::TCGenParticle;
   }
   static void *newArray_TCGenParticle(Long_t nElements, void *p) {
      return p ? new(p) ::TCGenParticle[nElements] : new ::TCGenParticle[nElements];
   }
   // Wrapper around operator delete
   static void delete_TCGenParticle(void *p) {
      delete ((::TCGenParticle*)p);
   }
   static void deleteArray_TCGenParticle(void *p) {
      delete [] ((::TCGenParticle*)p);
   }
   static void destruct_TCGenParticle(void *p) {
      typedef ::TCGenParticle current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOT for class ::TCGenParticle

//______________________________________________________________________________
void TCTriggerObject::Streamer(TBuffer &R__b)
{
   // Stream an object of class TCTriggerObject.

   if (R__b.IsReading()) {
      R__b.ReadClassBuffer(TCTriggerObject::Class(),this);
   } else {
      R__b.WriteClassBuffer(TCTriggerObject::Class(),this);
   }
}

//______________________________________________________________________________
void TCTriggerObject::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class TCTriggerObject.
      TClass *R__cl = ::TCTriggerObject::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "_id", &_id);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "_HLTName", (void*)&_HLTName);
      R__insp.InspectMember("string", (void*)&_HLTName, "_HLTName.", false);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "_moduleName", (void*)&_moduleName);
      R__insp.InspectMember("string", (void*)&_moduleName, "_moduleName.", false);
      TLorentzVector::ShowMembers(R__insp);
}

namespace ROOT {
   // Wrappers around operator new
   static void *new_TCTriggerObject(void *p) {
      return  p ? new(p) ::TCTriggerObject : new ::TCTriggerObject;
   }
   static void *newArray_TCTriggerObject(Long_t nElements, void *p) {
      return p ? new(p) ::TCTriggerObject[nElements] : new ::TCTriggerObject[nElements];
   }
   // Wrapper around operator delete
   static void delete_TCTriggerObject(void *p) {
      delete ((::TCTriggerObject*)p);
   }
   static void deleteArray_TCTriggerObject(void *p) {
      delete [] ((::TCTriggerObject*)p);
   }
   static void destruct_TCTriggerObject(void *p) {
      typedef ::TCTriggerObject current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOT for class ::TCTriggerObject

//______________________________________________________________________________
void TCPrimaryVtx::Streamer(TBuffer &R__b)
{
   // Stream an object of class TCPrimaryVtx.

   if (R__b.IsReading()) {
      R__b.ReadClassBuffer(TCPrimaryVtx::Class(),this);
   } else {
      R__b.WriteClassBuffer(TCPrimaryVtx::Class(),this);
   }
}

//______________________________________________________________________________
void TCPrimaryVtx::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class TCPrimaryVtx.
      TClass *R__cl = ::TCPrimaryVtx::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "_nDof", &_nDof);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "_chi2", &_chi2);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "_isFake", &_isFake);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "_nTracks", &_nTracks);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "_sumPt2Trks", &_sumPt2Trks);
      TVector3::ShowMembers(R__insp);
}

namespace ROOT {
   // Wrappers around operator new
   static void *new_TCPrimaryVtx(void *p) {
      return  p ? new(p) ::TCPrimaryVtx : new ::TCPrimaryVtx;
   }
   static void *newArray_TCPrimaryVtx(Long_t nElements, void *p) {
      return p ? new(p) ::TCPrimaryVtx[nElements] : new ::TCPrimaryVtx[nElements];
   }
   // Wrapper around operator delete
   static void delete_TCPrimaryVtx(void *p) {
      delete ((::TCPrimaryVtx*)p);
   }
   static void deleteArray_TCPrimaryVtx(void *p) {
      delete [] ((::TCPrimaryVtx*)p);
   }
   static void destruct_TCPrimaryVtx(void *p) {
      typedef ::TCPrimaryVtx current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOT for class ::TCPrimaryVtx

namespace ROOT {
   void vectorlETCEGammacLcLCrystalInfogR_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void vectorlETCEGammacLcLCrystalInfogR_Dictionary();
   static void *new_vectorlETCEGammacLcLCrystalInfogR(void *p = 0);
   static void *newArray_vectorlETCEGammacLcLCrystalInfogR(Long_t size, void *p);
   static void delete_vectorlETCEGammacLcLCrystalInfogR(void *p);
   static void deleteArray_vectorlETCEGammacLcLCrystalInfogR(void *p);
   static void destruct_vectorlETCEGammacLcLCrystalInfogR(void *p);

   // Function generating the singleton type initializer
   static TGenericClassInfo *GenerateInitInstanceLocal(const vector<TCEGamma::CrystalInfo>*)
   {
      vector<TCEGamma::CrystalInfo> *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TIsAProxy(typeid(vector<TCEGamma::CrystalInfo>),0);
      static ::ROOT::TGenericClassInfo 
         instance("vector<TCEGamma::CrystalInfo>", -2, "prec_stl/vector", 49,
                  typeid(vector<TCEGamma::CrystalInfo>), DefineBehavior(ptr, ptr),
                  0, &vectorlETCEGammacLcLCrystalInfogR_Dictionary, isa_proxy, 0,
                  sizeof(vector<TCEGamma::CrystalInfo>) );
      instance.SetNew(&new_vectorlETCEGammacLcLCrystalInfogR);
      instance.SetNewArray(&newArray_vectorlETCEGammacLcLCrystalInfogR);
      instance.SetDelete(&delete_vectorlETCEGammacLcLCrystalInfogR);
      instance.SetDeleteArray(&deleteArray_vectorlETCEGammacLcLCrystalInfogR);
      instance.SetDestructor(&destruct_vectorlETCEGammacLcLCrystalInfogR);
      instance.AdoptCollectionProxyInfo(TCollectionProxyInfo::Generate(TCollectionProxyInfo::Pushback< vector<TCEGamma::CrystalInfo> >()));
      return &instance;
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const vector<TCEGamma::CrystalInfo>*)0x0); R__UseDummy(_R__UNIQUE_(Init));

   // Dictionary for non-ClassDef classes
   static void vectorlETCEGammacLcLCrystalInfogR_Dictionary() {
      ::ROOT::GenerateInitInstanceLocal((const vector<TCEGamma::CrystalInfo>*)0x0)->GetClass();
   }

} // end of namespace ROOT

namespace ROOT {
   // Wrappers around operator new
   static void *new_vectorlETCEGammacLcLCrystalInfogR(void *p) {
      return  p ? ::new((::ROOT::TOperatorNewHelper*)p) vector<TCEGamma::CrystalInfo> : new vector<TCEGamma::CrystalInfo>;
   }
   static void *newArray_vectorlETCEGammacLcLCrystalInfogR(Long_t nElements, void *p) {
      return p ? ::new((::ROOT::TOperatorNewHelper*)p) vector<TCEGamma::CrystalInfo>[nElements] : new vector<TCEGamma::CrystalInfo>[nElements];
   }
   // Wrapper around operator delete
   static void delete_vectorlETCEGammacLcLCrystalInfogR(void *p) {
      delete ((vector<TCEGamma::CrystalInfo>*)p);
   }
   static void deleteArray_vectorlETCEGammacLcLCrystalInfogR(void *p) {
      delete [] ((vector<TCEGamma::CrystalInfo>*)p);
   }
   static void destruct_vectorlETCEGammacLcLCrystalInfogR(void *p) {
      typedef vector<TCEGamma::CrystalInfo> current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOT for class vector<TCEGamma::CrystalInfo>

namespace ROOT {
   void vectorlETCElectroncLcLHitInfogR_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void vectorlETCElectroncLcLHitInfogR_Dictionary();
   static void *new_vectorlETCElectroncLcLHitInfogR(void *p = 0);
   static void *newArray_vectorlETCElectroncLcLHitInfogR(Long_t size, void *p);
   static void delete_vectorlETCElectroncLcLHitInfogR(void *p);
   static void deleteArray_vectorlETCElectroncLcLHitInfogR(void *p);
   static void destruct_vectorlETCElectroncLcLHitInfogR(void *p);

   // Function generating the singleton type initializer
   static TGenericClassInfo *GenerateInitInstanceLocal(const vector<TCElectron::HitInfo>*)
   {
      vector<TCElectron::HitInfo> *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TIsAProxy(typeid(vector<TCElectron::HitInfo>),0);
      static ::ROOT::TGenericClassInfo 
         instance("vector<TCElectron::HitInfo>", -2, "prec_stl/vector", 49,
                  typeid(vector<TCElectron::HitInfo>), DefineBehavior(ptr, ptr),
                  0, &vectorlETCElectroncLcLHitInfogR_Dictionary, isa_proxy, 0,
                  sizeof(vector<TCElectron::HitInfo>) );
      instance.SetNew(&new_vectorlETCElectroncLcLHitInfogR);
      instance.SetNewArray(&newArray_vectorlETCElectroncLcLHitInfogR);
      instance.SetDelete(&delete_vectorlETCElectroncLcLHitInfogR);
      instance.SetDeleteArray(&deleteArray_vectorlETCElectroncLcLHitInfogR);
      instance.SetDestructor(&destruct_vectorlETCElectroncLcLHitInfogR);
      instance.AdoptCollectionProxyInfo(TCollectionProxyInfo::Generate(TCollectionProxyInfo::Pushback< vector<TCElectron::HitInfo> >()));
      return &instance;
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const vector<TCElectron::HitInfo>*)0x0); R__UseDummy(_R__UNIQUE_(Init));

   // Dictionary for non-ClassDef classes
   static void vectorlETCElectroncLcLHitInfogR_Dictionary() {
      ::ROOT::GenerateInitInstanceLocal((const vector<TCElectron::HitInfo>*)0x0)->GetClass();
   }

} // end of namespace ROOT

namespace ROOT {
   // Wrappers around operator new
   static void *new_vectorlETCElectroncLcLHitInfogR(void *p) {
      return  p ? ::new((::ROOT::TOperatorNewHelper*)p) vector<TCElectron::HitInfo> : new vector<TCElectron::HitInfo>;
   }
   static void *newArray_vectorlETCElectroncLcLHitInfogR(Long_t nElements, void *p) {
      return p ? ::new((::ROOT::TOperatorNewHelper*)p) vector<TCElectron::HitInfo>[nElements] : new vector<TCElectron::HitInfo>[nElements];
   }
   // Wrapper around operator delete
   static void delete_vectorlETCElectroncLcLHitInfogR(void *p) {
      delete ((vector<TCElectron::HitInfo>*)p);
   }
   static void deleteArray_vectorlETCElectroncLcLHitInfogR(void *p) {
      delete [] ((vector<TCElectron::HitInfo>*)p);
   }
   static void destruct_vectorlETCElectroncLcLHitInfogR(void *p) {
      typedef vector<TCElectron::HitInfo> current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOT for class vector<TCElectron::HitInfo>

namespace ROOT {
   void vectorlEfloatgR_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void vectorlEfloatgR_Dictionary();
   static void *new_vectorlEfloatgR(void *p = 0);
   static void *newArray_vectorlEfloatgR(Long_t size, void *p);
   static void delete_vectorlEfloatgR(void *p);
   static void deleteArray_vectorlEfloatgR(void *p);
   static void destruct_vectorlEfloatgR(void *p);

   // Function generating the singleton type initializer
   static TGenericClassInfo *GenerateInitInstanceLocal(const vector<float>*)
   {
      vector<float> *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TIsAProxy(typeid(vector<float>),0);
      static ::ROOT::TGenericClassInfo 
         instance("vector<float>", -2, "vector.dll", 0,
                  typeid(vector<float>), DefineBehavior(ptr, ptr),
                  0, &vectorlEfloatgR_Dictionary, isa_proxy, 0,
                  sizeof(vector<float>) );
      instance.SetNew(&new_vectorlEfloatgR);
      instance.SetNewArray(&newArray_vectorlEfloatgR);
      instance.SetDelete(&delete_vectorlEfloatgR);
      instance.SetDeleteArray(&deleteArray_vectorlEfloatgR);
      instance.SetDestructor(&destruct_vectorlEfloatgR);
      instance.AdoptCollectionProxyInfo(TCollectionProxyInfo::Generate(TCollectionProxyInfo::Pushback< vector<float> >()));
      return &instance;
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const vector<float>*)0x0); R__UseDummy(_R__UNIQUE_(Init));

   // Dictionary for non-ClassDef classes
   static void vectorlEfloatgR_Dictionary() {
      ::ROOT::GenerateInitInstanceLocal((const vector<float>*)0x0)->GetClass();
   }

} // end of namespace ROOT

namespace ROOT {
   // Wrappers around operator new
   static void *new_vectorlEfloatgR(void *p) {
      return  p ? ::new((::ROOT::TOperatorNewHelper*)p) vector<float> : new vector<float>;
   }
   static void *newArray_vectorlEfloatgR(Long_t nElements, void *p) {
      return p ? ::new((::ROOT::TOperatorNewHelper*)p) vector<float>[nElements] : new vector<float>[nElements];
   }
   // Wrapper around operator delete
   static void delete_vectorlEfloatgR(void *p) {
      delete ((vector<float>*)p);
   }
   static void deleteArray_vectorlEfloatgR(void *p) {
      delete [] ((vector<float>*)p);
   }
   static void destruct_vectorlEfloatgR(void *p) {
      typedef vector<float> current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOT for class vector<float>

namespace ROOT {
   void vectorlEpairlEstringcOfloatgRsPgR_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void vectorlEpairlEstringcOfloatgRsPgR_Dictionary();
   static void *new_vectorlEpairlEstringcOfloatgRsPgR(void *p = 0);
   static void *newArray_vectorlEpairlEstringcOfloatgRsPgR(Long_t size, void *p);
   static void delete_vectorlEpairlEstringcOfloatgRsPgR(void *p);
   static void deleteArray_vectorlEpairlEstringcOfloatgRsPgR(void *p);
   static void destruct_vectorlEpairlEstringcOfloatgRsPgR(void *p);

   // Function generating the singleton type initializer
   static TGenericClassInfo *GenerateInitInstanceLocal(const vector<pair<string,float> >*)
   {
      vector<pair<string,float> > *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TIsAProxy(typeid(vector<pair<string,float> >),0);
      static ::ROOT::TGenericClassInfo 
         instance("vector<pair<string,float> >", -2, "prec_stl/vector", 49,
                  typeid(vector<pair<string,float> >), DefineBehavior(ptr, ptr),
                  0, &vectorlEpairlEstringcOfloatgRsPgR_Dictionary, isa_proxy, 0,
                  sizeof(vector<pair<string,float> >) );
      instance.SetNew(&new_vectorlEpairlEstringcOfloatgRsPgR);
      instance.SetNewArray(&newArray_vectorlEpairlEstringcOfloatgRsPgR);
      instance.SetDelete(&delete_vectorlEpairlEstringcOfloatgRsPgR);
      instance.SetDeleteArray(&deleteArray_vectorlEpairlEstringcOfloatgRsPgR);
      instance.SetDestructor(&destruct_vectorlEpairlEstringcOfloatgRsPgR);
      instance.AdoptCollectionProxyInfo(TCollectionProxyInfo::Generate(TCollectionProxyInfo::Pushback< vector<pair<string,float> > >()));
      return &instance;
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const vector<pair<string,float> >*)0x0); R__UseDummy(_R__UNIQUE_(Init));

   // Dictionary for non-ClassDef classes
   static void vectorlEpairlEstringcOfloatgRsPgR_Dictionary() {
      ::ROOT::GenerateInitInstanceLocal((const vector<pair<string,float> >*)0x0)->GetClass();
   }

} // end of namespace ROOT

namespace ROOT {
   // Wrappers around operator new
   static void *new_vectorlEpairlEstringcOfloatgRsPgR(void *p) {
      return  p ? ::new((::ROOT::TOperatorNewHelper*)p) vector<pair<string,float> > : new vector<pair<string,float> >;
   }
   static void *newArray_vectorlEpairlEstringcOfloatgRsPgR(Long_t nElements, void *p) {
      return p ? ::new((::ROOT::TOperatorNewHelper*)p) vector<pair<string,float> >[nElements] : new vector<pair<string,float> >[nElements];
   }
   // Wrapper around operator delete
   static void delete_vectorlEpairlEstringcOfloatgRsPgR(void *p) {
      delete ((vector<pair<string,float> >*)p);
   }
   static void deleteArray_vectorlEpairlEstringcOfloatgRsPgR(void *p) {
      delete [] ((vector<pair<string,float> >*)p);
   }
   static void destruct_vectorlEpairlEstringcOfloatgRsPgR(void *p) {
      typedef vector<pair<string,float> > current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOT for class vector<pair<string,float> >

/********************************************************
* testProjectDict.cxx
* CAUTION: DON'T CHANGE THIS FILE. THIS FILE IS AUTOMATICALLY GENERATED
*          FROM HEADER FILES LISTED IN G__setup_cpp_environmentXXX().
*          CHANGE THOSE HEADER FILES AND REGENERATE THIS FILE.
********************************************************/

#ifdef G__MEMTEST
#undef malloc
#undef free
#endif

#if defined(__GNUC__) && __GNUC__ >= 4 && ((__GNUC_MINOR__ == 2 && __GNUC_PATCHLEVEL__ >= 1) || (__GNUC_MINOR__ >= 3))
#pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif

extern "C" void G__cpp_reset_tagtabletestProjectDict();

extern "C" void G__set_cpp_environmenttestProjectDict() {
  G__add_compiledheader("TObject.h");
  G__add_compiledheader("TMemberInspector.h");
  G__add_compiledheader("testProjectHeaders.h");
  G__cpp_reset_tagtabletestProjectDict();
}
#include <new>
extern "C" int G__cpp_dllrevtestProjectDict() { return(30051515); }

/*********************************************************
* Member function Interface Method
*********************************************************/

/* TCMET */
static int G__testProjectDict_162_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   TCMET* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new TCMET[n];
     } else {
       p = new((void*) gvp) TCMET[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new TCMET;
     } else {
       p = new((void*) gvp) TCMET;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__testProjectDictLN_TCMET));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__testProjectDict_162_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   TCMET* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 1
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new TCMET(*(TCMET*) libp->para[0].ref);
   } else {
     p = new((void*) gvp) TCMET(*(TCMET*) libp->para[0].ref);
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__testProjectDictLN_TCMET));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__testProjectDict_162_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) TCMET::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__testProjectDict_162_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) TCMET::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__testProjectDict_162_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) TCMET::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__testProjectDict_162_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      TCMET::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__testProjectDict_162_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((TCMET*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__testProjectDict_162_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) TCMET::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__testProjectDict_162_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) TCMET::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__testProjectDict_162_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) TCMET::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__testProjectDict_162_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) TCMET::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef TCMET G__TTCMET;
static int G__testProjectDict_162_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (TCMET*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((TCMET*) (soff+(sizeof(TCMET)*i)))->~G__TTCMET();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (TCMET*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((TCMET*) (soff))->~G__TTCMET();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__testProjectDict_162_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   TCMET* dest = (TCMET*) G__getstructoffset();
   *dest = *(TCMET*) libp->para[0].ref;
   const TCMET& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* TCJet */
static int G__testProjectDict_164_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   TCJet* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new TCJet[n];
     } else {
       p = new((void*) gvp) TCJet[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new TCJet;
     } else {
       p = new((void*) gvp) TCJet;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__testProjectDictLN_TCJet));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__testProjectDict_164_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   TCJet* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 1
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new TCJet(*(TCJet*) libp->para[0].ref);
   } else {
     p = new((void*) gvp) TCJet(*(TCJet*) libp->para[0].ref);
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__testProjectDictLN_TCJet));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__testProjectDict_164_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) TCJet::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__testProjectDict_164_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) TCJet::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__testProjectDict_164_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) TCJet::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__testProjectDict_164_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      TCJet::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__testProjectDict_164_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((TCJet*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__testProjectDict_164_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) TCJet::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__testProjectDict_164_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) TCJet::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__testProjectDict_164_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) TCJet::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__testProjectDict_164_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) TCJet::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef TCJet G__TTCJet;
static int G__testProjectDict_164_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (TCJet*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((TCJet*) (soff+(sizeof(TCJet)*i)))->~G__TTCJet();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (TCJet*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((TCJet*) (soff))->~G__TTCJet();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__testProjectDict_164_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   TCJet* dest = (TCJet*) G__getstructoffset();
   *dest = *(TCJet*) libp->para[0].ref;
   const TCJet& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* TCPhysObject */
static int G__testProjectDict_165_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   TCPhysObject* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new TCPhysObject[n];
     } else {
       p = new((void*) gvp) TCPhysObject[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new TCPhysObject;
     } else {
       p = new((void*) gvp) TCPhysObject;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__testProjectDictLN_TCPhysObject));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__testProjectDict_165_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   TCPhysObject* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 1
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new TCPhysObject(*(TCPhysObject*) libp->para[0].ref);
   } else {
     p = new((void*) gvp) TCPhysObject(*(TCPhysObject*) libp->para[0].ref);
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__testProjectDictLN_TCPhysObject));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__testProjectDict_165_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) TCPhysObject::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__testProjectDict_165_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) TCPhysObject::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__testProjectDict_165_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) TCPhysObject::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__testProjectDict_165_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      TCPhysObject::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__testProjectDict_165_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((TCPhysObject*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__testProjectDict_165_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) TCPhysObject::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__testProjectDict_165_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) TCPhysObject::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__testProjectDict_165_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) TCPhysObject::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__testProjectDict_165_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) TCPhysObject::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef TCPhysObject G__TTCPhysObject;
static int G__testProjectDict_165_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (TCPhysObject*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((TCPhysObject*) (soff+(sizeof(TCPhysObject)*i)))->~G__TTCPhysObject();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (TCPhysObject*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((TCPhysObject*) (soff))->~G__TTCPhysObject();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__testProjectDict_165_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   TCPhysObject* dest = (TCPhysObject*) G__getstructoffset();
   *dest = *(TCPhysObject*) libp->para[0].ref;
   const TCPhysObject& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* TCElectron */
static int G__testProjectDict_467_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   TCElectron* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new TCElectron[n];
     } else {
       p = new((void*) gvp) TCElectron[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new TCElectron;
     } else {
       p = new((void*) gvp) TCElectron;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__testProjectDictLN_TCElectron));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__testProjectDict_467_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   TCElectron* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 1
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new TCElectron(*(TCElectron*) libp->para[0].ref);
   } else {
     p = new((void*) gvp) TCElectron(*(TCElectron*) libp->para[0].ref);
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__testProjectDictLN_TCElectron));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__testProjectDict_467_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) TCElectron::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__testProjectDict_467_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) TCElectron::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__testProjectDict_467_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) TCElectron::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__testProjectDict_467_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      TCElectron::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__testProjectDict_467_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((TCElectron*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__testProjectDict_467_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) TCElectron::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__testProjectDict_467_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) TCElectron::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__testProjectDict_467_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) TCElectron::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__testProjectDict_467_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) TCElectron::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef TCElectron G__TTCElectron;
static int G__testProjectDict_467_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (TCElectron*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((TCElectron*) (soff+(sizeof(TCElectron)*i)))->~G__TTCElectron();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (TCElectron*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((TCElectron*) (soff))->~G__TTCElectron();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__testProjectDict_467_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   TCElectron* dest = (TCElectron*) G__getstructoffset();
   *dest = *(TCElectron*) libp->para[0].ref;
   const TCElectron& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* TCEGamma */
static int G__testProjectDict_468_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   TCEGamma* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new TCEGamma[n];
     } else {
       p = new((void*) gvp) TCEGamma[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new TCEGamma;
     } else {
       p = new((void*) gvp) TCEGamma;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__testProjectDictLN_TCEGamma));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__testProjectDict_468_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   TCEGamma* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 1
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new TCEGamma(*(TCEGamma*) libp->para[0].ref);
   } else {
     p = new((void*) gvp) TCEGamma(*(TCEGamma*) libp->para[0].ref);
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__testProjectDictLN_TCEGamma));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__testProjectDict_468_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) TCEGamma::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__testProjectDict_468_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) TCEGamma::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__testProjectDict_468_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) TCEGamma::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__testProjectDict_468_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      TCEGamma::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__testProjectDict_468_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((TCEGamma*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__testProjectDict_468_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) TCEGamma::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__testProjectDict_468_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) TCEGamma::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__testProjectDict_468_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) TCEGamma::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__testProjectDict_468_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) TCEGamma::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef TCEGamma G__TTCEGamma;
static int G__testProjectDict_468_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (TCEGamma*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((TCEGamma*) (soff+(sizeof(TCEGamma)*i)))->~G__TTCEGamma();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (TCEGamma*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((TCEGamma*) (soff))->~G__TTCEGamma();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__testProjectDict_468_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   TCEGamma* dest = (TCEGamma*) G__getstructoffset();
   *dest = *(TCEGamma*) libp->para[0].ref;
   const TCEGamma& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* TCEGamma::CrystalInfo */
static int G__testProjectDict_469_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   TCEGamma::CrystalInfo* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new TCEGamma::CrystalInfo[n];
     } else {
       p = new((void*) gvp) TCEGamma::CrystalInfo[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new TCEGamma::CrystalInfo;
     } else {
       p = new((void*) gvp) TCEGamma::CrystalInfo;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__testProjectDictLN_TCEGammacLcLCrystalInfo));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__testProjectDict_469_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   TCEGamma::CrystalInfo* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 1
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new TCEGamma::CrystalInfo(*(TCEGamma::CrystalInfo*) libp->para[0].ref);
   } else {
     p = new((void*) gvp) TCEGamma::CrystalInfo(*(TCEGamma::CrystalInfo*) libp->para[0].ref);
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__testProjectDictLN_TCEGammacLcLCrystalInfo));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef TCEGamma::CrystalInfo G__TTCEGammacLcLCrystalInfo;
static int G__testProjectDict_469_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 0
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (TCEGamma::CrystalInfo*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((TCEGamma::CrystalInfo*) (soff+(sizeof(TCEGamma::CrystalInfo)*i)))->~G__TTCEGammacLcLCrystalInfo();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (TCEGamma::CrystalInfo*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((TCEGamma::CrystalInfo*) (soff))->~G__TTCEGammacLcLCrystalInfo();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__testProjectDict_469_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   TCEGamma::CrystalInfo* dest = (TCEGamma::CrystalInfo*) G__getstructoffset();
   *dest = *(TCEGamma::CrystalInfo*) libp->para[0].ref;
   const TCEGamma::CrystalInfo& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* TCElectron::HitInfo */
static int G__testProjectDict_474_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   TCElectron::HitInfo* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new TCElectron::HitInfo[n];
     } else {
       p = new((void*) gvp) TCElectron::HitInfo[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new TCElectron::HitInfo;
     } else {
       p = new((void*) gvp) TCElectron::HitInfo;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__testProjectDictLN_TCElectroncLcLHitInfo));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__testProjectDict_474_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   TCElectron::HitInfo* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 1
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new TCElectron::HitInfo(*(TCElectron::HitInfo*) libp->para[0].ref);
   } else {
     p = new((void*) gvp) TCElectron::HitInfo(*(TCElectron::HitInfo*) libp->para[0].ref);
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__testProjectDictLN_TCElectroncLcLHitInfo));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef TCElectron::HitInfo G__TTCElectroncLcLHitInfo;
static int G__testProjectDict_474_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 0
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (TCElectron::HitInfo*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((TCElectron::HitInfo*) (soff+(sizeof(TCElectron::HitInfo)*i)))->~G__TTCElectroncLcLHitInfo();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (TCElectron::HitInfo*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((TCElectron::HitInfo*) (soff))->~G__TTCElectroncLcLHitInfo();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__testProjectDict_474_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   TCElectron::HitInfo* dest = (TCElectron::HitInfo*) G__getstructoffset();
   *dest = *(TCElectron::HitInfo*) libp->para[0].ref;
   const TCElectron::HitInfo& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* TCMuon */
static int G__testProjectDict_479_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   TCMuon* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new TCMuon[n];
     } else {
       p = new((void*) gvp) TCMuon[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new TCMuon;
     } else {
       p = new((void*) gvp) TCMuon;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__testProjectDictLN_TCMuon));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__testProjectDict_479_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   TCMuon* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 1
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new TCMuon(*(TCMuon*) libp->para[0].ref);
   } else {
     p = new((void*) gvp) TCMuon(*(TCMuon*) libp->para[0].ref);
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__testProjectDictLN_TCMuon));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__testProjectDict_479_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) TCMuon::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__testProjectDict_479_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) TCMuon::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__testProjectDict_479_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) TCMuon::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__testProjectDict_479_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      TCMuon::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__testProjectDict_479_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((TCMuon*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__testProjectDict_479_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) TCMuon::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__testProjectDict_479_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) TCMuon::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__testProjectDict_479_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) TCMuon::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__testProjectDict_479_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) TCMuon::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef TCMuon G__TTCMuon;
static int G__testProjectDict_479_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (TCMuon*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((TCMuon*) (soff+(sizeof(TCMuon)*i)))->~G__TTCMuon();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (TCMuon*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((TCMuon*) (soff))->~G__TTCMuon();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__testProjectDict_479_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   TCMuon* dest = (TCMuon*) G__getstructoffset();
   *dest = *(TCMuon*) libp->para[0].ref;
   const TCMuon& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* TCPhoton */
static int G__testProjectDict_480_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   TCPhoton* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new TCPhoton[n];
     } else {
       p = new((void*) gvp) TCPhoton[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new TCPhoton;
     } else {
       p = new((void*) gvp) TCPhoton;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__testProjectDictLN_TCPhoton));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__testProjectDict_480_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   TCPhoton* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 1
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new TCPhoton(*(TCPhoton*) libp->para[0].ref);
   } else {
     p = new((void*) gvp) TCPhoton(*(TCPhoton*) libp->para[0].ref);
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__testProjectDictLN_TCPhoton));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__testProjectDict_480_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) TCPhoton::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__testProjectDict_480_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) TCPhoton::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__testProjectDict_480_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) TCPhoton::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__testProjectDict_480_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      TCPhoton::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__testProjectDict_480_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((TCPhoton*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__testProjectDict_480_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) TCPhoton::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__testProjectDict_480_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) TCPhoton::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__testProjectDict_480_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) TCPhoton::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__testProjectDict_480_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) TCPhoton::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef TCPhoton G__TTCPhoton;
static int G__testProjectDict_480_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (TCPhoton*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((TCPhoton*) (soff+(sizeof(TCPhoton)*i)))->~G__TTCPhoton();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (TCPhoton*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((TCPhoton*) (soff))->~G__TTCPhoton();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__testProjectDict_480_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   TCPhoton* dest = (TCPhoton*) G__getstructoffset();
   *dest = *(TCPhoton*) libp->para[0].ref;
   const TCPhoton& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* TCGenJet */
static int G__testProjectDict_481_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   TCGenJet* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new TCGenJet[n];
     } else {
       p = new((void*) gvp) TCGenJet[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new TCGenJet;
     } else {
       p = new((void*) gvp) TCGenJet;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__testProjectDictLN_TCGenJet));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__testProjectDict_481_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   TCGenJet* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 1
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new TCGenJet(*(TCGenJet*) libp->para[0].ref);
   } else {
     p = new((void*) gvp) TCGenJet(*(TCGenJet*) libp->para[0].ref);
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__testProjectDictLN_TCGenJet));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__testProjectDict_481_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) TCGenJet::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__testProjectDict_481_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) TCGenJet::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__testProjectDict_481_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) TCGenJet::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__testProjectDict_481_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      TCGenJet::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__testProjectDict_481_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((TCGenJet*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__testProjectDict_481_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) TCGenJet::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__testProjectDict_481_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) TCGenJet::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__testProjectDict_481_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) TCGenJet::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__testProjectDict_481_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) TCGenJet::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef TCGenJet G__TTCGenJet;
static int G__testProjectDict_481_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (TCGenJet*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((TCGenJet*) (soff+(sizeof(TCGenJet)*i)))->~G__TTCGenJet();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (TCGenJet*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((TCGenJet*) (soff))->~G__TTCGenJet();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__testProjectDict_481_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   TCGenJet* dest = (TCGenJet*) G__getstructoffset();
   *dest = *(TCGenJet*) libp->para[0].ref;
   const TCGenJet& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* TCGenParticle */
static int G__testProjectDict_482_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   TCGenParticle* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new TCGenParticle[n];
     } else {
       p = new((void*) gvp) TCGenParticle[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new TCGenParticle;
     } else {
       p = new((void*) gvp) TCGenParticle;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__testProjectDictLN_TCGenParticle));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__testProjectDict_482_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   TCGenParticle* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 1
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new TCGenParticle(*(TCGenParticle*) libp->para[0].ref);
   } else {
     p = new((void*) gvp) TCGenParticle(*(TCGenParticle*) libp->para[0].ref);
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__testProjectDictLN_TCGenParticle));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__testProjectDict_482_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) TCGenParticle::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__testProjectDict_482_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) TCGenParticle::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__testProjectDict_482_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) TCGenParticle::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__testProjectDict_482_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      TCGenParticle::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__testProjectDict_482_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((TCGenParticle*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__testProjectDict_482_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) TCGenParticle::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__testProjectDict_482_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) TCGenParticle::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__testProjectDict_482_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) TCGenParticle::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__testProjectDict_482_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) TCGenParticle::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef TCGenParticle G__TTCGenParticle;
static int G__testProjectDict_482_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (TCGenParticle*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((TCGenParticle*) (soff+(sizeof(TCGenParticle)*i)))->~G__TTCGenParticle();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (TCGenParticle*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((TCGenParticle*) (soff))->~G__TTCGenParticle();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__testProjectDict_482_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   TCGenParticle* dest = (TCGenParticle*) G__getstructoffset();
   *dest = *(TCGenParticle*) libp->para[0].ref;
   const TCGenParticle& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* TCTriggerObject */
static int G__testProjectDict_483_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   TCTriggerObject* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new TCTriggerObject[n];
     } else {
       p = new((void*) gvp) TCTriggerObject[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new TCTriggerObject;
     } else {
       p = new((void*) gvp) TCTriggerObject;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__testProjectDictLN_TCTriggerObject));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__testProjectDict_483_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   TCTriggerObject* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 1
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new TCTriggerObject(*(TCTriggerObject*) libp->para[0].ref);
   } else {
     p = new((void*) gvp) TCTriggerObject(*(TCTriggerObject*) libp->para[0].ref);
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__testProjectDictLN_TCTriggerObject));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__testProjectDict_483_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) TCTriggerObject::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__testProjectDict_483_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) TCTriggerObject::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__testProjectDict_483_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) TCTriggerObject::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__testProjectDict_483_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      TCTriggerObject::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__testProjectDict_483_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((TCTriggerObject*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__testProjectDict_483_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) TCTriggerObject::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__testProjectDict_483_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) TCTriggerObject::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__testProjectDict_483_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) TCTriggerObject::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__testProjectDict_483_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) TCTriggerObject::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef TCTriggerObject G__TTCTriggerObject;
static int G__testProjectDict_483_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (TCTriggerObject*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((TCTriggerObject*) (soff+(sizeof(TCTriggerObject)*i)))->~G__TTCTriggerObject();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (TCTriggerObject*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((TCTriggerObject*) (soff))->~G__TTCTriggerObject();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__testProjectDict_483_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   TCTriggerObject* dest = (TCTriggerObject*) G__getstructoffset();
   *dest = *(TCTriggerObject*) libp->para[0].ref;
   const TCTriggerObject& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* TCPrimaryVtx */
static int G__testProjectDict_484_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   TCPrimaryVtx* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new TCPrimaryVtx[n];
     } else {
       p = new((void*) gvp) TCPrimaryVtx[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new TCPrimaryVtx;
     } else {
       p = new((void*) gvp) TCPrimaryVtx;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__testProjectDictLN_TCPrimaryVtx));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__testProjectDict_484_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   TCPrimaryVtx* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 1
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new TCPrimaryVtx(*(TCPrimaryVtx*) libp->para[0].ref);
   } else {
     p = new((void*) gvp) TCPrimaryVtx(*(TCPrimaryVtx*) libp->para[0].ref);
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__testProjectDictLN_TCPrimaryVtx));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__testProjectDict_484_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) TCPrimaryVtx::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__testProjectDict_484_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) TCPrimaryVtx::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__testProjectDict_484_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) TCPrimaryVtx::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__testProjectDict_484_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      TCPrimaryVtx::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__testProjectDict_484_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((TCPrimaryVtx*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__testProjectDict_484_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) TCPrimaryVtx::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__testProjectDict_484_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) TCPrimaryVtx::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__testProjectDict_484_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) TCPrimaryVtx::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__testProjectDict_484_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) TCPrimaryVtx::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef TCPrimaryVtx G__TTCPrimaryVtx;
static int G__testProjectDict_484_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (TCPrimaryVtx*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((TCPrimaryVtx*) (soff+(sizeof(TCPrimaryVtx)*i)))->~G__TTCPrimaryVtx();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (TCPrimaryVtx*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((TCPrimaryVtx*) (soff))->~G__TTCPrimaryVtx();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__testProjectDict_484_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   TCPrimaryVtx* dest = (TCPrimaryVtx*) G__getstructoffset();
   *dest = *(TCPrimaryVtx*) libp->para[0].ref;
   const TCPrimaryVtx& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* Setting up global function */

/*********************************************************
* Member function Stub
*********************************************************/

/* TCMET */

/* TCJet */

/* TCPhysObject */

/* TCElectron */

/* TCEGamma */

/* TCEGamma::CrystalInfo */

/* TCElectron::HitInfo */

/* TCMuon */

/* TCPhoton */

/* TCGenJet */

/* TCGenParticle */

/* TCTriggerObject */

/* TCPrimaryVtx */

/*********************************************************
* Global function Stub
*********************************************************/

/*********************************************************
* Get size of pointer to member function
*********************************************************/
class G__Sizep2memfunctestProjectDict {
 public:
  G__Sizep2memfunctestProjectDict(): p(&G__Sizep2memfunctestProjectDict::sizep2memfunc) {}
    size_t sizep2memfunc() { return(sizeof(p)); }
  private:
    size_t (G__Sizep2memfunctestProjectDict::*p)();
};

size_t G__get_sizep2memfunctestProjectDict()
{
  G__Sizep2memfunctestProjectDict a;
  G__setsizep2memfunc((int)a.sizep2memfunc());
  return((size_t)a.sizep2memfunc());
}


/*********************************************************
* virtual base class offset calculation interface
*********************************************************/

   /* Setting up class inheritance */

/*********************************************************
* Inheritance information setup/
*********************************************************/
extern "C" void G__cpp_setup_inheritancetestProjectDict() {

   /* Setting up class inheritance */
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__testProjectDictLN_TCMET))) {
     TCMET *G__Lderived;
     G__Lderived=(TCMET*)0x1000;
     {
       TVector2 *G__Lpbase=(TVector2*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__testProjectDictLN_TCMET),G__get_linked_tagnum(&G__testProjectDictLN_TVector2),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__testProjectDictLN_TCMET),G__get_linked_tagnum(&G__testProjectDictLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__testProjectDictLN_TVector2))) {
     TVector2 *G__Lderived;
     G__Lderived=(TVector2*)0x1000;
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__testProjectDictLN_TVector2),G__get_linked_tagnum(&G__testProjectDictLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__testProjectDictLN_TCJet))) {
     TCJet *G__Lderived;
     G__Lderived=(TCJet*)0x1000;
     {
       TCPhysObject *G__Lpbase=(TCPhysObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__testProjectDictLN_TCJet),G__get_linked_tagnum(&G__testProjectDictLN_TCPhysObject),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
     {
       TLorentzVector *G__Lpbase=(TLorentzVector*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__testProjectDictLN_TCJet),G__get_linked_tagnum(&G__testProjectDictLN_TLorentzVector),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__testProjectDictLN_TCJet),G__get_linked_tagnum(&G__testProjectDictLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__testProjectDictLN_TCPhysObject))) {
     TCPhysObject *G__Lderived;
     G__Lderived=(TCPhysObject*)0x1000;
     {
       TLorentzVector *G__Lpbase=(TLorentzVector*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__testProjectDictLN_TCPhysObject),G__get_linked_tagnum(&G__testProjectDictLN_TLorentzVector),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__testProjectDictLN_TCPhysObject),G__get_linked_tagnum(&G__testProjectDictLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__testProjectDictLN_TLorentzVector))) {
     TLorentzVector *G__Lderived;
     G__Lderived=(TLorentzVector*)0x1000;
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__testProjectDictLN_TLorentzVector),G__get_linked_tagnum(&G__testProjectDictLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__testProjectDictLN_TCElectron))) {
     TCElectron *G__Lderived;
     G__Lderived=(TCElectron*)0x1000;
     {
       TCEGamma *G__Lpbase=(TCEGamma*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__testProjectDictLN_TCElectron),G__get_linked_tagnum(&G__testProjectDictLN_TCEGamma),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
     {
       TCPhysObject *G__Lpbase=(TCPhysObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__testProjectDictLN_TCElectron),G__get_linked_tagnum(&G__testProjectDictLN_TCPhysObject),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
     {
       TLorentzVector *G__Lpbase=(TLorentzVector*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__testProjectDictLN_TCElectron),G__get_linked_tagnum(&G__testProjectDictLN_TLorentzVector),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__testProjectDictLN_TCElectron),G__get_linked_tagnum(&G__testProjectDictLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__testProjectDictLN_TCEGamma))) {
     TCEGamma *G__Lderived;
     G__Lderived=(TCEGamma*)0x1000;
     {
       TCPhysObject *G__Lpbase=(TCPhysObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__testProjectDictLN_TCEGamma),G__get_linked_tagnum(&G__testProjectDictLN_TCPhysObject),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
     {
       TLorentzVector *G__Lpbase=(TLorentzVector*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__testProjectDictLN_TCEGamma),G__get_linked_tagnum(&G__testProjectDictLN_TLorentzVector),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__testProjectDictLN_TCEGamma),G__get_linked_tagnum(&G__testProjectDictLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__testProjectDictLN_TCMuon))) {
     TCMuon *G__Lderived;
     G__Lderived=(TCMuon*)0x1000;
     {
       TCPhysObject *G__Lpbase=(TCPhysObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__testProjectDictLN_TCMuon),G__get_linked_tagnum(&G__testProjectDictLN_TCPhysObject),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
     {
       TLorentzVector *G__Lpbase=(TLorentzVector*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__testProjectDictLN_TCMuon),G__get_linked_tagnum(&G__testProjectDictLN_TLorentzVector),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__testProjectDictLN_TCMuon),G__get_linked_tagnum(&G__testProjectDictLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__testProjectDictLN_TCPhoton))) {
     TCPhoton *G__Lderived;
     G__Lderived=(TCPhoton*)0x1000;
     {
       TCEGamma *G__Lpbase=(TCEGamma*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__testProjectDictLN_TCPhoton),G__get_linked_tagnum(&G__testProjectDictLN_TCEGamma),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
     {
       TCPhysObject *G__Lpbase=(TCPhysObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__testProjectDictLN_TCPhoton),G__get_linked_tagnum(&G__testProjectDictLN_TCPhysObject),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
     {
       TLorentzVector *G__Lpbase=(TLorentzVector*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__testProjectDictLN_TCPhoton),G__get_linked_tagnum(&G__testProjectDictLN_TLorentzVector),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__testProjectDictLN_TCPhoton),G__get_linked_tagnum(&G__testProjectDictLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__testProjectDictLN_TCGenJet))) {
     TCGenJet *G__Lderived;
     G__Lderived=(TCGenJet*)0x1000;
     {
       TCPhysObject *G__Lpbase=(TCPhysObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__testProjectDictLN_TCGenJet),G__get_linked_tagnum(&G__testProjectDictLN_TCPhysObject),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
     {
       TLorentzVector *G__Lpbase=(TLorentzVector*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__testProjectDictLN_TCGenJet),G__get_linked_tagnum(&G__testProjectDictLN_TLorentzVector),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__testProjectDictLN_TCGenJet),G__get_linked_tagnum(&G__testProjectDictLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__testProjectDictLN_TCGenParticle))) {
     TCGenParticle *G__Lderived;
     G__Lderived=(TCGenParticle*)0x1000;
     {
       TCPhysObject *G__Lpbase=(TCPhysObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__testProjectDictLN_TCGenParticle),G__get_linked_tagnum(&G__testProjectDictLN_TCPhysObject),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
     {
       TLorentzVector *G__Lpbase=(TLorentzVector*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__testProjectDictLN_TCGenParticle),G__get_linked_tagnum(&G__testProjectDictLN_TLorentzVector),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__testProjectDictLN_TCGenParticle),G__get_linked_tagnum(&G__testProjectDictLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__testProjectDictLN_TCTriggerObject))) {
     TCTriggerObject *G__Lderived;
     G__Lderived=(TCTriggerObject*)0x1000;
     {
       TLorentzVector *G__Lpbase=(TLorentzVector*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__testProjectDictLN_TCTriggerObject),G__get_linked_tagnum(&G__testProjectDictLN_TLorentzVector),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__testProjectDictLN_TCTriggerObject),G__get_linked_tagnum(&G__testProjectDictLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__testProjectDictLN_TCPrimaryVtx))) {
     TCPrimaryVtx *G__Lderived;
     G__Lderived=(TCPrimaryVtx*)0x1000;
     {
       TVector3 *G__Lpbase=(TVector3*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__testProjectDictLN_TCPrimaryVtx),G__get_linked_tagnum(&G__testProjectDictLN_TVector3),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__testProjectDictLN_TCPrimaryVtx),G__get_linked_tagnum(&G__testProjectDictLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
   }
}

/*********************************************************
* typedef information setup/
*********************************************************/
extern "C" void G__cpp_setup_typetabletestProjectDict() {

   /* Setting up typedef entry */
   G__search_typename2("Version_t",115,-1,0,-1);
   G__setnewtype(-1,"Class version identifier (short)",0);
   G__search_typename2("vector<ROOT::TSchemaHelper>",117,G__get_linked_tagnum(&G__testProjectDictLN_vectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<const_iterator>",117,G__get_linked_tagnum(&G__testProjectDictLN_reverse_iteratorlEvectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__testProjectDictLN_vectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<iterator>",117,G__get_linked_tagnum(&G__testProjectDictLN_reverse_iteratorlEvectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__testProjectDictLN_vectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("vector<TVirtualArray*>",117,G__get_linked_tagnum(&G__testProjectDictLN_vectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<const_iterator>",117,G__get_linked_tagnum(&G__testProjectDictLN_reverse_iteratorlEvectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__testProjectDictLN_vectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<iterator>",117,G__get_linked_tagnum(&G__testProjectDictLN_reverse_iteratorlEvectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__testProjectDictLN_vectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TMatrixTBase<Float_t>",117,G__get_linked_tagnum(&G__testProjectDictLN_TMatrixTBaselEfloatgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TMatrixTBase<Double_t>",117,G__get_linked_tagnum(&G__testProjectDictLN_TMatrixTBaselEdoublegR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TVectorT<Float_t>",117,G__get_linked_tagnum(&G__testProjectDictLN_TVectorTlEfloatgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TVectorT<Double_t>",117,G__get_linked_tagnum(&G__testProjectDictLN_TVectorTlEdoublegR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TMatrixT<Float_t>",117,G__get_linked_tagnum(&G__testProjectDictLN_TMatrixTlEfloatgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TMatrixTRow_const<Float_t>",117,G__get_linked_tagnum(&G__testProjectDictLN_TMatrixTRow_constlEfloatgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TMatrixTColumn_const<Float_t>",117,G__get_linked_tagnum(&G__testProjectDictLN_TMatrixTColumn_constlEfloatgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TMatrixTDiag_const<Float_t>",117,G__get_linked_tagnum(&G__testProjectDictLN_TMatrixTDiag_constlEfloatgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TMatrixTFlat_const<Float_t>",117,G__get_linked_tagnum(&G__testProjectDictLN_TMatrixTFlat_constlEfloatgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TMatrixTSub_const<Float_t>",117,G__get_linked_tagnum(&G__testProjectDictLN_TMatrixTSub_constlEfloatgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TMatrixTSparseRow_const<Float_t>",117,G__get_linked_tagnum(&G__testProjectDictLN_TMatrixTSparseRow_constlEfloatgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TMatrixTSparseDiag_const<Float_t>",117,G__get_linked_tagnum(&G__testProjectDictLN_TMatrixTSparseDiag_constlEfloatgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TMatrixTRow<Float_t>",117,G__get_linked_tagnum(&G__testProjectDictLN_TMatrixTRowlEfloatgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TMatrixTColumn<Float_t>",117,G__get_linked_tagnum(&G__testProjectDictLN_TMatrixTColumnlEfloatgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TMatrixTDiag<Float_t>",117,G__get_linked_tagnum(&G__testProjectDictLN_TMatrixTDiaglEfloatgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TMatrixTFlat<Float_t>",117,G__get_linked_tagnum(&G__testProjectDictLN_TMatrixTFlatlEfloatgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TMatrixTSub<Float_t>",117,G__get_linked_tagnum(&G__testProjectDictLN_TMatrixTSublEfloatgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TMatrixTSparseRow<Float_t>",117,G__get_linked_tagnum(&G__testProjectDictLN_TMatrixTSparseRowlEfloatgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TMatrixTSparseDiag<Float_t>",117,G__get_linked_tagnum(&G__testProjectDictLN_TMatrixTSparseDiaglEfloatgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TElementActionT<Float_t>",117,G__get_linked_tagnum(&G__testProjectDictLN_TElementActionTlEfloatgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TElementPosActionT<Float_t>",117,G__get_linked_tagnum(&G__testProjectDictLN_TElementPosActionTlEfloatgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("pair<std::string,float>",117,G__get_linked_tagnum(&G__testProjectDictLN_pairlEstringcOfloatgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("vector<std::pair<std::string,float> >",117,G__get_linked_tagnum(&G__testProjectDictLN_vectorlEpairlEstringcOfloatgRcOallocatorlEpairlEstringcOfloatgRsPgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<const_iterator>",117,G__get_linked_tagnum(&G__testProjectDictLN_reverse_iteratorlEvectorlEpairlEstringcOfloatgRcOallocatorlEpairlEstringcOfloatgRsPgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__testProjectDictLN_vectorlEpairlEstringcOfloatgRcOallocatorlEpairlEstringcOfloatgRsPgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<iterator>",117,G__get_linked_tagnum(&G__testProjectDictLN_reverse_iteratorlEvectorlEpairlEstringcOfloatgRcOallocatorlEpairlEstringcOfloatgRsPgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__testProjectDictLN_vectorlEpairlEstringcOfloatgRcOallocatorlEpairlEstringcOfloatgRsPgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("vector<pair<string,float> >",117,G__get_linked_tagnum(&G__testProjectDictLN_vectorlEpairlEstringcOfloatgRcOallocatorlEpairlEstringcOfloatgRsPgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("vector<TCEGamma::CrystalInfo>",117,G__get_linked_tagnum(&G__testProjectDictLN_vectorlETCEGammacLcLCrystalInfocOallocatorlETCEGammacLcLCrystalInfogRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<const_iterator>",117,G__get_linked_tagnum(&G__testProjectDictLN_reverse_iteratorlEvectorlETCEGammacLcLCrystalInfocOallocatorlETCEGammacLcLCrystalInfogRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__testProjectDictLN_vectorlETCEGammacLcLCrystalInfocOallocatorlETCEGammacLcLCrystalInfogRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<iterator>",117,G__get_linked_tagnum(&G__testProjectDictLN_reverse_iteratorlEvectorlETCEGammacLcLCrystalInfocOallocatorlETCEGammacLcLCrystalInfogRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__testProjectDictLN_vectorlETCEGammacLcLCrystalInfocOallocatorlETCEGammacLcLCrystalInfogRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("vector<TCElectron::HitInfo>",117,G__get_linked_tagnum(&G__testProjectDictLN_vectorlETCElectroncLcLHitInfocOallocatorlETCElectroncLcLHitInfogRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<const_iterator>",117,G__get_linked_tagnum(&G__testProjectDictLN_reverse_iteratorlEvectorlETCElectroncLcLHitInfocOallocatorlETCElectroncLcLHitInfogRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__testProjectDictLN_vectorlETCElectroncLcLHitInfocOallocatorlETCElectroncLcLHitInfogRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<iterator>",117,G__get_linked_tagnum(&G__testProjectDictLN_reverse_iteratorlEvectorlETCElectroncLcLHitInfocOallocatorlETCElectroncLcLHitInfogRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__testProjectDictLN_vectorlETCElectroncLcLHitInfocOallocatorlETCElectroncLcLHitInfogRsPgR));
   G__setnewtype(-1,NULL,0);
}

/*********************************************************
* Data Member information setup/
*********************************************************/

   /* Setting up class,struct,union tag member variable */

   /* TCMET */
static void G__setup_memvarTCMET(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__testProjectDictLN_TCMET));
   { TCMET *p; p=(TCMET*)0x1000; if (p) { }
   G__memvar_setup((void*)((long)(&p->_genMET)-(long)(p)),117,0,0,G__get_linked_tagnum(&G__testProjectDictLN_TVector2),-1,-1,1,"_genMET=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->_sumEt)-(long)(p)),102,0,0,-1,-1,-1,1,"_sumEt=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->_muonFraction)-(long)(p)),102,0,0,-1,-1,-1,1,"_muonFraction=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->_neutralHadronFraction)-(long)(p)),102,0,0,-1,-1,-1,1,"_neutralHadronFraction=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->_neutralEMFraction)-(long)(p)),102,0,0,-1,-1,-1,1,"_neutralEMFraction=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->_chargedHadronFraction)-(long)(p)),102,0,0,-1,-1,-1,1,"_chargedHadronFraction=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->_chargedEMFraction)-(long)(p)),102,0,0,-1,-1,-1,1,"_chargedEMFraction=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->_unCorPhi)-(long)(p)),102,0,0,-1,-1,-1,1,"_unCorPhi=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->_Significance)-(long)(p)),102,0,0,-1,-1,-1,1,"_Significance=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->_SigmaX2)-(long)(p)),102,0,0,-1,-1,-1,1,"_SigmaX2=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__testProjectDictLN_TClass),-1,-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* TCJet */
static void G__setup_memvarTCJet(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__testProjectDictLN_TCJet));
   { TCJet *p; p=(TCJet*)0x1000; if (p) { }
   G__memvar_setup((void*)((long)(&p->_id_cut_loose)-(long)(p)),105,0,0,-1,-1,-1,1,"_id_cut_loose=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->_id_cut_medium)-(long)(p)),105,0,0,-1,-1,-1,1,"_id_cut_medium=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->_id_cut_tight)-(long)(p)),105,0,0,-1,-1,-1,1,"_id_cut_tight=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->_id_mva_loose)-(long)(p)),105,0,0,-1,-1,-1,1,"_id_mva_loose=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->_id_mva_medium)-(long)(p)),105,0,0,-1,-1,-1,1,"_id_mva_medium=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->_id_mva_tight)-(long)(p)),105,0,0,-1,-1,-1,1,"_id_mva_tight=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__testProjectDictLN_TClass),-1,-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* TCPhysObject */
static void G__setup_memvarTCPhysObject(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__testProjectDictLN_TCPhysObject));
   { TCPhysObject *p; p=(TCPhysObject*)0x1000; if (p) { }
   G__memvar_setup((void*)((long)(&p->_vtx)-(long)(p)),117,0,0,G__get_linked_tagnum(&G__testProjectDictLN_TVector3),-1,-1,1,"_vtx=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->_IdMap)-(long)(p)),117,0,0,G__get_linked_tagnum(&G__testProjectDictLN_vectorlEpairlEstringcOfloatgRcOallocatorlEpairlEstringcOfloatgRsPgRsPgR),G__defined_typename("vector<std::pair<std::string,float> >"),-1,1,"_IdMap=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->_IsoMap)-(long)(p)),117,0,0,G__get_linked_tagnum(&G__testProjectDictLN_vectorlEpairlEstringcOfloatgRcOallocatorlEpairlEstringcOfloatgRsPgRsPgR),G__defined_typename("vector<std::pair<std::string,float> >"),-1,1,"_IsoMap=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->_charge)-(long)(p)),105,0,0,-1,-1,-1,1,"_charge=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->_type)-(long)(p)),117,0,0,G__get_linked_tagnum(&G__testProjectDictLN_string),-1,-1,1,"_type=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->_isPF)-(long)(p)),103,0,0,-1,-1,-1,1,"_isPF=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->_isReco)-(long)(p)),103,0,0,-1,-1,-1,1,"_isReco=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__testProjectDictLN_TClass),-1,-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* TCElectron */
static void G__setup_memvarTCElectron(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__testProjectDictLN_TCElectron));
   { TCElectron *p; p=(TCElectron*)0x1000; if (p) { }
   G__memvar_setup((void*)((long)(&p->_pos)-(long)(p)),117,0,0,G__get_linked_tagnum(&G__testProjectDictLN_TVector3),-1,-1,1,"_pos=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->_normChi2gsf)-(long)(p)),102,0,0,-1,-1,-1,1,"_normChi2gsf=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->_normChi2kf)-(long)(p)),102,0,0,-1,-1,-1,1,"_normChi2kf=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->_ptError)-(long)(p)),102,0,0,-1,-1,-1,1,"_ptError=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->_fBrem)-(long)(p)),102,0,0,-1,-1,-1,1,"_fBrem=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->_inverseEnergyMomentumDiff)-(long)(p)),102,0,0,-1,-1,-1,1,"_inverseEnergyMomentumDiff=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->_EoP)-(long)(p)),102,0,0,-1,-1,-1,1,"_EoP=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->_EoPout)-(long)(p)),102,0,0,-1,-1,-1,1,"_EoPout=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->_ip3d)-(long)(p)),102,0,0,-1,-1,-1,1,"_ip3d=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->_ip3dSig)-(long)(p)),102,0,0,-1,-1,-1,1,"_ip3dSig=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->_deltaEtaSeedCluster)-(long)(p)),102,0,0,-1,-1,-1,1,"_deltaEtaSeedCluster=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->_deltaPhiSeedCluster)-(long)(p)),102,0,0,-1,-1,-1,1,"_deltaPhiSeedCluster=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->_passConvVeto)-(long)(p)),103,0,0,-1,-1,-1,1,"_passConvVeto=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->_convMissHits)-(long)(p)),115,0,0,-1,-1,-1,1,"_convMissHits=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->_trackerLayersWithMeasurement)-(long)(p)),105,0,0,-1,-1,-1,1,"_trackerLayersWithMeasurement=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->_numberOfValidHits)-(long)(p)),105,0,0,-1,-1,-1,1,"_numberOfValidHits=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->_numberOfValidPixelHits)-(long)(p)),105,0,0,-1,-1,-1,1,"_numberOfValidPixelHits=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->_numberOfValidTrackerHits)-(long)(p)),105,0,0,-1,-1,-1,1,"_numberOfValidTrackerHits=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->_numberOfLostPixelHits)-(long)(p)),105,0,0,-1,-1,-1,1,"_numberOfLostPixelHits=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->_numberOfLostTrackerHits)-(long)(p)),105,0,0,-1,-1,-1,1,"_numberOfLostTrackerHits=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->_effArea)-(long)(p)),102,0,0,-1,-1,-1,1,"_effArea=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->_HitMap)-(long)(p)),117,0,0,G__get_linked_tagnum(&G__testProjectDictLN_vectorlETCElectroncLcLHitInfocOallocatorlETCElectroncLcLHitInfogRsPgR),G__defined_typename("vector<TCElectron::HitInfo>"),-1,1,"_HitMap=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__testProjectDictLN_TClass),-1,-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* TCEGamma */
static void G__setup_memvarTCEGamma(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__testProjectDictLN_TCEGamma));
   { TCEGamma *p; p=(TCEGamma*)0x1000; if (p) { }
   G__memvar_setup((void*)((long)(&p->_isEB)-(long)(p)),103,0,0,-1,-1,-1,1,"_isEB=",0,"true if particle is in ECAL Barrel");
   G__memvar_setup((void*)((long)(&p->_isEE)-(long)(p)),103,0,0,-1,-1,-1,1,"_isEE=",0,"true if particle is in ECAL Endcaps");
   G__memvar_setup((void*)((long)(&p->_isInGap)-(long)(p)),103,0,0,-1,-1,-1,1,"_isInGap=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->_hadOverEm)-(long)(p)),102,0,0,-1,-1,-1,1,"_hadOverEm=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->_r9)-(long)(p)),102,0,0,-1,-1,-1,1,"_r9=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->_scEta)-(long)(p)),102,0,0,-1,-1,-1,1,"_scEta=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->_scPhi)-(long)(p)),102,0,0,-1,-1,-1,1,"_scPhi=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->_scDeltaPhi)-(long)(p)),102,0,0,-1,-1,-1,1,"_scDeltaPhi=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->_scDeltaEta)-(long)(p)),102,0,0,-1,-1,-1,1,"_scDeltaEta=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->_scSigmaIetaIeta)-(long)(p)),102,0,0,-1,-1,-1,1,"_scSigmaIetaIeta=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->_scSigmaIetaIphi)-(long)(p)),102,0,0,-1,-1,-1,1,"_scSigmaIetaIphi=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->_scSigmaIphiIphi)-(long)(p)),102,0,0,-1,-1,-1,1,"_scSigmaIphiIphi=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->_scEtaWidth)-(long)(p)),102,0,0,-1,-1,-1,1,"_scEtaWidth=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->_scPhiWidth)-(long)(p)),102,0,0,-1,-1,-1,1,"_scPhiWidth=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->_scRawEnergy)-(long)(p)),102,0,0,-1,-1,-1,1,"_scRawEnergy=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->_scEnergy)-(long)(p)),102,0,0,-1,-1,-1,1,"_scEnergy=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->_scPSEnergy)-(long)(p)),102,0,0,-1,-1,-1,1,"_scPSEnergy=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->_preShowerOverRaw)-(long)(p)),102,0,0,-1,-1,-1,1,"_preShowerOverRaw=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->_e1x3)-(long)(p)),102,0,0,-1,-1,-1,1,"_e1x3=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->_e1x5)-(long)(p)),102,0,0,-1,-1,-1,1,"_e1x5=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->_e2x2)-(long)(p)),102,0,0,-1,-1,-1,1,"_e2x2=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->_e2x5)-(long)(p)),102,0,0,-1,-1,-1,1,"_e2x5=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->_e2x5Max)-(long)(p)),102,0,0,-1,-1,-1,1,"_e2x5Max=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->_e5x5)-(long)(p)),102,0,0,-1,-1,-1,1,"_e5x5=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->_esEffSigmaRR)-(long)(p)),117,0,0,G__get_linked_tagnum(&G__testProjectDictLN_vectorlEfloatcOallocatorlEfloatgRsPgR),G__defined_typename("vector<float>"),-1,1,"_esEffSigmaRR=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->_pfIsoCharged)-(long)(p)),102,0,0,-1,-1,-1,1,"_pfIsoCharged=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->_pfIsoNeutral)-(long)(p)),102,0,0,-1,-1,-1,1,"_pfIsoNeutral=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->_pfIsoPhoton)-(long)(p)),102,0,0,-1,-1,-1,1,"_pfIsoPhoton=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->_crysVect)-(long)(p)),117,0,0,G__get_linked_tagnum(&G__testProjectDictLN_vectorlETCEGammacLcLCrystalInfocOallocatorlETCEGammacLcLCrystalInfogRsPgR),G__defined_typename("vector<TCEGamma::CrystalInfo>"),-1,1,"_crysVect=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->_nCrystals)-(long)(p)),105,0,0,-1,-1,-1,1,"_nCrystals=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__testProjectDictLN_TClass),-1,-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* TCEGamma::CrystalInfo */
static void G__setup_memvarTCEGammacLcLCrystalInfo(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__testProjectDictLN_TCEGammacLcLCrystalInfo));
   { TCEGamma::CrystalInfo *p; p=(TCEGamma::CrystalInfo*)0x1000; if (p) { }
   G__memvar_setup((void*)((long)(&p->rawId)-(long)(p)),105,0,0,-1,-1,-1,1,"rawId=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->ieta)-(long)(p)),105,0,0,-1,-1,-1,1,"ieta=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->iphi)-(long)(p)),105,0,0,-1,-1,-1,1,"iphi=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->energy)-(long)(p)),100,0,0,-1,-1,-1,1,"energy=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->time)-(long)(p)),100,0,0,-1,-1,-1,1,"time=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->timeErr)-(long)(p)),100,0,0,-1,-1,-1,1,"timeErr=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->recoFlag)-(long)(p)),105,0,0,-1,-1,-1,1,"recoFlag=",0,(char*)NULL);
   G__memvar_setup((void*)0,108,0,0,-1,-1,-1,4,"G__virtualinfo=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* TCElectron::HitInfo */
static void G__setup_memvarTCElectroncLcLHitInfo(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__testProjectDictLN_TCElectroncLcLHitInfo));
   { TCElectron::HitInfo *p; p=(TCElectron::HitInfo*)0x1000; if (p) { }
   G__memvar_setup((void*)((long)(&p->Layer)-(long)(p)),105,0,0,-1,-1,-1,1,"Layer=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->ValidFilter)-(long)(p)),103,0,0,-1,-1,-1,1,"ValidFilter=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->PixelFilter)-(long)(p)),103,0,0,-1,-1,-1,1,"PixelFilter=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->BarrelPixelFilter)-(long)(p)),103,0,0,-1,-1,-1,1,"BarrelPixelFilter=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->MuonFilter)-(long)(p)),103,0,0,-1,-1,-1,1,"MuonFilter=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->StripFilter)-(long)(p)),103,0,0,-1,-1,-1,1,"StripFilter=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->TrackerFilter)-(long)(p)),103,0,0,-1,-1,-1,1,"TrackerFilter=",0,(char*)NULL);
   G__memvar_setup((void*)0,108,0,0,-1,-1,-1,4,"G__virtualinfo=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* TCMuon */
static void G__setup_memvarTCMuon(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__testProjectDictLN_TCMuon));
   { TCMuon *p; p=(TCMuon*)0x1000; if (p) { }
   G__memvar_setup((void*)((long)(&p->_ptError)-(long)(p)),102,0,0,-1,-1,-1,1,"_ptError=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->_isPF)-(long)(p)),103,0,0,-1,-1,-1,1,"_isPF=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->_isTRK)-(long)(p)),103,0,0,-1,-1,-1,1,"_isTRK=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->_isGLB)-(long)(p)),103,0,0,-1,-1,-1,1,"_isGLB=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->_isSoft)-(long)(p)),103,0,0,-1,-1,-1,1,"_isSoft=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->_isTight)-(long)(p)),103,0,0,-1,-1,-1,1,"_isTight=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->_isGood)-(long)(p)),103,0,0,-1,-1,-1,1,"_isGood=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->_isGoodLoose)-(long)(p)),103,0,0,-1,-1,-1,1,"_isGoodLoose=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->_caloComp)-(long)(p)),102,0,0,-1,-1,-1,1,"_caloComp=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->_segComp)-(long)(p)),102,0,0,-1,-1,-1,1,"_segComp=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->_numberOfMatches)-(long)(p)),105,0,0,-1,-1,-1,1,"_numberOfMatches=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->_numberOfMatchedStations)-(long)(p)),105,0,0,-1,-1,-1,1,"_numberOfMatchedStations=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->_numberOfValidPixelHits)-(long)(p)),105,0,0,-1,-1,-1,1,"_numberOfValidPixelHits=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->_numberOfValidTrackerHits)-(long)(p)),105,0,0,-1,-1,-1,1,"_numberOfValidTrackerHits=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->_numberOfLostPixelHits)-(long)(p)),105,0,0,-1,-1,-1,1,"_numberOfLostPixelHits=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->_numberOfLostTrackerHits)-(long)(p)),105,0,0,-1,-1,-1,1,"_numberOfLostTrackerHits=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->_numberOfValidMuonHits)-(long)(p)),105,0,0,-1,-1,-1,1,"_numberOfValidMuonHits=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->_trackLayersWithMeasurement)-(long)(p)),105,0,0,-1,-1,-1,1,"_trackLayersWithMeasurement=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->_pixelLayersWithMeasurement)-(long)(p)),105,0,0,-1,-1,-1,1,"_pixelLayersWithMeasurement=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->_normalizedChi2)-(long)(p)),102,0,0,-1,-1,-1,1,"_normalizedChi2=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->_normalizedChi2_tracker)-(long)(p)),102,0,0,-1,-1,-1,1,"_normalizedChi2_tracker=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->_pfIsoCharged)-(long)(p)),102,0,0,-1,-1,-1,1,"_pfIsoCharged=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->_pfIsoNeutral)-(long)(p)),102,0,0,-1,-1,-1,1,"_pfIsoNeutral=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->_pfIsoPhoton)-(long)(p)),102,0,0,-1,-1,-1,1,"_pfIsoPhoton=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__testProjectDictLN_TClass),-1,-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* TCPhoton */
static void G__setup_memvarTCPhoton(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__testProjectDictLN_TCPhoton));
   { TCPhoton *p; p=(TCPhoton*)0x1000; if (p) { }
   G__memvar_setup((void*)((long)(&p->_trackVeto)-(long)(p)),103,0,0,-1,-1,-1,1,"_trackVeto=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->_convVeto)-(long)(p)),103,0,0,-1,-1,-1,1,"_convVeto=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->_mipchi2)-(long)(p)),102,0,0,-1,-1,-1,1,"_mipchi2=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->_miptoten)-(long)(p)),102,0,0,-1,-1,-1,1,"_miptoten=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->_mipslope)-(long)(p)),102,0,0,-1,-1,-1,1,"_mipslope=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->_mipintercept)-(long)(p)),102,0,0,-1,-1,-1,1,"_mipintercept=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->_mipnhitcone)-(long)(p)),102,0,0,-1,-1,-1,1,"_mipnhitcone=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->_mipishalo)-(long)(p)),102,0,0,-1,-1,-1,1,"_mipishalo=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->_roundness)-(long)(p)),102,0,0,-1,-1,-1,1,"_roundness=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->_angle)-(long)(p)),102,0,0,-1,-1,-1,1,"_angle=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->_smin)-(long)(p)),102,0,0,-1,-1,-1,1,"_smin=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->_smaj)-(long)(p)),102,0,0,-1,-1,-1,1,"_smaj=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__testProjectDictLN_TClass),-1,-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* TCGenJet */
static void G__setup_memvarTCGenJet(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__testProjectDictLN_TCGenJet));
   { TCGenJet *p; p=(TCGenJet*)0x1000; if (p) { }
   G__memvar_setup((void*)((long)(&p->_progenitorP4)-(long)(p)),117,0,0,G__get_linked_tagnum(&G__testProjectDictLN_TLorentzVector),-1,-1,1,"_progenitorP4=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->_hadEnergy)-(long)(p)),102,0,0,-1,-1,-1,1,"_hadEnergy=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->_emEnergy)-(long)(p)),102,0,0,-1,-1,-1,1,"_emEnergy=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->_invEnergy)-(long)(p)),102,0,0,-1,-1,-1,1,"_invEnergy=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->_auxEnergy)-(long)(p)),102,0,0,-1,-1,-1,1,"_auxEnergy=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->_numConstit)-(long)(p)),104,0,0,-1,-1,-1,1,"_numConstit=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->_numChPart)-(long)(p)),104,0,0,-1,-1,-1,1,"_numChPart=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->_jetFlavor)-(long)(p)),105,0,0,-1,-1,-1,1,"_jetFlavor=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__testProjectDictLN_TClass),-1,-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* TCGenParticle */
static void G__setup_memvarTCGenParticle(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__testProjectDictLN_TCGenParticle));
   { TCGenParticle *p; p=(TCGenParticle*)0x1000; if (p) { }
   G__memvar_setup((void*)((long)(&p->_mother)-(long)(p)),85,0,0,G__get_linked_tagnum(&G__testProjectDictLN_TCGenParticle),-1,-1,1,"_mother=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->_PDGID)-(long)(p)),105,0,0,-1,-1,-1,1,"_PDGID=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->_status)-(long)(p)),104,0,0,-1,-1,-1,1,"_status=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->_isParton)-(long)(p)),103,0,0,-1,-1,-1,1,"_isParton=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__testProjectDictLN_TClass),-1,-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* TCTriggerObject */
static void G__setup_memvarTCTriggerObject(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__testProjectDictLN_TCTriggerObject));
   { TCTriggerObject *p; p=(TCTriggerObject*)0x1000; if (p) { }
   G__memvar_setup((void*)((long)(&p->_id)-(long)(p)),105,0,0,-1,-1,-1,1,"_id=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->_HLTName)-(long)(p)),117,0,0,G__get_linked_tagnum(&G__testProjectDictLN_string),-1,-1,1,"_HLTName=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->_moduleName)-(long)(p)),117,0,0,G__get_linked_tagnum(&G__testProjectDictLN_string),-1,-1,1,"_moduleName=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__testProjectDictLN_TClass),-1,-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* TCPrimaryVtx */
static void G__setup_memvarTCPrimaryVtx(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__testProjectDictLN_TCPrimaryVtx));
   { TCPrimaryVtx *p; p=(TCPrimaryVtx*)0x1000; if (p) { }
   G__memvar_setup((void*)((long)(&p->_nDof)-(long)(p)),102,0,0,-1,-1,-1,1,"_nDof=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->_chi2)-(long)(p)),102,0,0,-1,-1,-1,1,"_chi2=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->_isFake)-(long)(p)),103,0,0,-1,-1,-1,1,"_isFake=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->_nTracks)-(long)(p)),105,0,0,-1,-1,-1,1,"_nTracks=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->_sumPt2Trks)-(long)(p)),102,0,0,-1,-1,-1,1,"_sumPt2Trks=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__testProjectDictLN_TClass),-1,-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}

extern "C" void G__cpp_setup_memvartestProjectDict() {
}
/***********************************************************
************************************************************
************************************************************
************************************************************
************************************************************
************************************************************
************************************************************
***********************************************************/

/*********************************************************
* Member function information setup for each class
*********************************************************/
static void G__setup_memfuncTCMET(void) {
   /* TCMET */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__testProjectDictLN_TCMET));
   G__memfunc_setup("TCMET",381,G__testProjectDict_162_0_1, 105, G__get_linked_tagnum(&G__testProjectDictLN_TCMET), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("TCMET",381,G__testProjectDict_162_0_2, 105, G__get_linked_tagnum(&G__testProjectDictLN_TCMET), -1, 0, 1, 1, 1, 0, "u 'TCMET' - 11 - -", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Class",502,G__testProjectDict_162_0_3, 85, G__get_linked_tagnum(&G__testProjectDictLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&TCMET::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__testProjectDict_162_0_4, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&TCMET::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__testProjectDict_162_0_5, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&TCMET::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__testProjectDict_162_0_6, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&TCMET::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__testProjectDictLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - insp", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - b", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__testProjectDict_162_0_10, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__testProjectDict_162_0_11, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&TCMET::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__testProjectDict_162_0_12, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&TCMET::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__testProjectDict_162_0_13, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&TCMET::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__testProjectDict_162_0_14, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&TCMET::DeclFileLine) ), 0);
   // automatic destructor
   G__memfunc_setup("~TCMET", 507, G__testProjectDict_162_0_15, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G__testProjectDict_162_0_16, (int) ('u'), G__get_linked_tagnum(&G__testProjectDictLN_TCMET), -1, 1, 1, 1, 1, 0, "u 'TCMET' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncTCJet(void) {
   /* TCJet */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__testProjectDictLN_TCJet));
   G__memfunc_setup("TCJet",442,G__testProjectDict_164_0_1, 105, G__get_linked_tagnum(&G__testProjectDictLN_TCJet), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("TCJet",442,G__testProjectDict_164_0_2, 105, G__get_linked_tagnum(&G__testProjectDictLN_TCJet), -1, 0, 1, 1, 1, 0, "u 'TCJet' - 11 - -", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Class",502,G__testProjectDict_164_0_3, 85, G__get_linked_tagnum(&G__testProjectDictLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&TCJet::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__testProjectDict_164_0_4, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&TCJet::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__testProjectDict_164_0_5, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&TCJet::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__testProjectDict_164_0_6, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&TCJet::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__testProjectDictLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - insp", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - b", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__testProjectDict_164_0_10, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__testProjectDict_164_0_11, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&TCJet::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__testProjectDict_164_0_12, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&TCJet::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__testProjectDict_164_0_13, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&TCJet::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__testProjectDict_164_0_14, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&TCJet::DeclFileLine) ), 0);
   // automatic destructor
   G__memfunc_setup("~TCJet", 568, G__testProjectDict_164_0_15, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G__testProjectDict_164_0_16, (int) ('u'), G__get_linked_tagnum(&G__testProjectDictLN_TCJet), -1, 1, 1, 1, 1, 0, "u 'TCJet' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncTCPhysObject(void) {
   /* TCPhysObject */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__testProjectDictLN_TCPhysObject));
   G__memfunc_setup("TCPhysObject",1170,G__testProjectDict_165_0_1, 105, G__get_linked_tagnum(&G__testProjectDictLN_TCPhysObject), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("TCPhysObject",1170,G__testProjectDict_165_0_2, 105, G__get_linked_tagnum(&G__testProjectDictLN_TCPhysObject), -1, 0, 1, 1, 1, 0, "u 'TCPhysObject' - 11 - -", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Class",502,G__testProjectDict_165_0_3, 85, G__get_linked_tagnum(&G__testProjectDictLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&TCPhysObject::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__testProjectDict_165_0_4, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&TCPhysObject::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__testProjectDict_165_0_5, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&TCPhysObject::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__testProjectDict_165_0_6, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&TCPhysObject::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__testProjectDictLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - insp", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - b", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__testProjectDict_165_0_10, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__testProjectDict_165_0_11, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&TCPhysObject::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__testProjectDict_165_0_12, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&TCPhysObject::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__testProjectDict_165_0_13, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&TCPhysObject::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__testProjectDict_165_0_14, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&TCPhysObject::DeclFileLine) ), 0);
   // automatic destructor
   G__memfunc_setup("~TCPhysObject", 1296, G__testProjectDict_165_0_15, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G__testProjectDict_165_0_16, (int) ('u'), G__get_linked_tagnum(&G__testProjectDictLN_TCPhysObject), -1, 1, 1, 1, 1, 0, "u 'TCPhysObject' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncTCElectron(void) {
   /* TCElectron */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__testProjectDictLN_TCElectron));
   G__memfunc_setup("TCElectron",979,G__testProjectDict_467_0_1, 105, G__get_linked_tagnum(&G__testProjectDictLN_TCElectron), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("TCElectron",979,G__testProjectDict_467_0_2, 105, G__get_linked_tagnum(&G__testProjectDictLN_TCElectron), -1, 0, 1, 1, 1, 0, "u 'TCElectron' - 11 - -", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Class",502,G__testProjectDict_467_0_3, 85, G__get_linked_tagnum(&G__testProjectDictLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&TCElectron::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__testProjectDict_467_0_4, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&TCElectron::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__testProjectDict_467_0_5, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&TCElectron::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__testProjectDict_467_0_6, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&TCElectron::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__testProjectDictLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - insp", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - b", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__testProjectDict_467_0_10, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__testProjectDict_467_0_11, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&TCElectron::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__testProjectDict_467_0_12, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&TCElectron::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__testProjectDict_467_0_13, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&TCElectron::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__testProjectDict_467_0_14, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&TCElectron::DeclFileLine) ), 0);
   // automatic destructor
   G__memfunc_setup("~TCElectron", 1105, G__testProjectDict_467_0_15, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G__testProjectDict_467_0_16, (int) ('u'), G__get_linked_tagnum(&G__testProjectDictLN_TCElectron), -1, 1, 1, 1, 1, 0, "u 'TCElectron' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncTCEGamma(void) {
   /* TCEGamma */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__testProjectDictLN_TCEGamma));
   G__memfunc_setup("TCEGamma",703,G__testProjectDict_468_0_1, 105, G__get_linked_tagnum(&G__testProjectDictLN_TCEGamma), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("TCEGamma",703,G__testProjectDict_468_0_2, 105, G__get_linked_tagnum(&G__testProjectDictLN_TCEGamma), -1, 0, 1, 1, 1, 0, "u 'TCEGamma' - 11 - -", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Class",502,G__testProjectDict_468_0_3, 85, G__get_linked_tagnum(&G__testProjectDictLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&TCEGamma::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__testProjectDict_468_0_4, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&TCEGamma::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__testProjectDict_468_0_5, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&TCEGamma::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__testProjectDict_468_0_6, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&TCEGamma::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__testProjectDictLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - insp", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - b", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__testProjectDict_468_0_10, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__testProjectDict_468_0_11, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&TCEGamma::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__testProjectDict_468_0_12, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&TCEGamma::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__testProjectDict_468_0_13, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&TCEGamma::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__testProjectDict_468_0_14, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&TCEGamma::DeclFileLine) ), 0);
   // automatic destructor
   G__memfunc_setup("~TCEGamma", 829, G__testProjectDict_468_0_15, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G__testProjectDict_468_0_16, (int) ('u'), G__get_linked_tagnum(&G__testProjectDictLN_TCEGamma), -1, 1, 1, 1, 1, 0, "u 'TCEGamma' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncTCEGammacLcLCrystalInfo(void) {
   /* TCEGamma::CrystalInfo */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__testProjectDictLN_TCEGammacLcLCrystalInfo));
   G__memfunc_setup("CrystalInfo",1134,G__testProjectDict_469_0_1, 105, G__get_linked_tagnum(&G__testProjectDictLN_TCEGammacLcLCrystalInfo), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("CrystalInfo",1134,G__testProjectDict_469_0_2, 105, G__get_linked_tagnum(&G__testProjectDictLN_TCEGammacLcLCrystalInfo), -1, 0, 1, 1, 1, 0, "u 'TCEGamma::CrystalInfo' - 11 - -", (char*)NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~CrystalInfo", 1260, G__testProjectDict_469_0_3, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G__testProjectDict_469_0_4, (int) ('u'), G__get_linked_tagnum(&G__testProjectDictLN_TCEGammacLcLCrystalInfo), -1, 1, 1, 1, 1, 0, "u 'TCEGamma::CrystalInfo' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncTCElectroncLcLHitInfo(void) {
   /* TCElectron::HitInfo */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__testProjectDictLN_TCElectroncLcLHitInfo));
   G__memfunc_setup("HitInfo",689,G__testProjectDict_474_0_1, 105, G__get_linked_tagnum(&G__testProjectDictLN_TCElectroncLcLHitInfo), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("HitInfo",689,G__testProjectDict_474_0_2, 105, G__get_linked_tagnum(&G__testProjectDictLN_TCElectroncLcLHitInfo), -1, 0, 1, 1, 1, 0, "u 'TCElectron::HitInfo' - 11 - -", (char*)NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~HitInfo", 815, G__testProjectDict_474_0_3, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G__testProjectDict_474_0_4, (int) ('u'), G__get_linked_tagnum(&G__testProjectDictLN_TCElectroncLcLHitInfo), -1, 1, 1, 1, 1, 0, "u 'TCElectron::HitInfo' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncTCMuon(void) {
   /* TCMuon */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__testProjectDictLN_TCMuon));
   G__memfunc_setup("TCMuon",566,G__testProjectDict_479_0_1, 105, G__get_linked_tagnum(&G__testProjectDictLN_TCMuon), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("TCMuon",566,G__testProjectDict_479_0_2, 105, G__get_linked_tagnum(&G__testProjectDictLN_TCMuon), -1, 0, 1, 1, 1, 0, "u 'TCMuon' - 11 - -", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Class",502,G__testProjectDict_479_0_3, 85, G__get_linked_tagnum(&G__testProjectDictLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&TCMuon::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__testProjectDict_479_0_4, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&TCMuon::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__testProjectDict_479_0_5, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&TCMuon::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__testProjectDict_479_0_6, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&TCMuon::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__testProjectDictLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - insp", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - b", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__testProjectDict_479_0_10, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__testProjectDict_479_0_11, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&TCMuon::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__testProjectDict_479_0_12, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&TCMuon::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__testProjectDict_479_0_13, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&TCMuon::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__testProjectDict_479_0_14, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&TCMuon::DeclFileLine) ), 0);
   // automatic destructor
   G__memfunc_setup("~TCMuon", 692, G__testProjectDict_479_0_15, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G__testProjectDict_479_0_16, (int) ('u'), G__get_linked_tagnum(&G__testProjectDictLN_TCMuon), -1, 1, 1, 1, 1, 0, "u 'TCMuon' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncTCPhoton(void) {
   /* TCPhoton */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__testProjectDictLN_TCPhoton));
   G__memfunc_setup("TCPhoton",783,G__testProjectDict_480_0_1, 105, G__get_linked_tagnum(&G__testProjectDictLN_TCPhoton), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("TCPhoton",783,G__testProjectDict_480_0_2, 105, G__get_linked_tagnum(&G__testProjectDictLN_TCPhoton), -1, 0, 1, 1, 1, 0, "u 'TCPhoton' - 11 - -", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Class",502,G__testProjectDict_480_0_3, 85, G__get_linked_tagnum(&G__testProjectDictLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&TCPhoton::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__testProjectDict_480_0_4, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&TCPhoton::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__testProjectDict_480_0_5, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&TCPhoton::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__testProjectDict_480_0_6, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&TCPhoton::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__testProjectDictLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - insp", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - b", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__testProjectDict_480_0_10, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__testProjectDict_480_0_11, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&TCPhoton::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__testProjectDict_480_0_12, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&TCPhoton::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__testProjectDict_480_0_13, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&TCPhoton::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__testProjectDict_480_0_14, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&TCPhoton::DeclFileLine) ), 0);
   // automatic destructor
   G__memfunc_setup("~TCPhoton", 909, G__testProjectDict_480_0_15, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G__testProjectDict_480_0_16, (int) ('u'), G__get_linked_tagnum(&G__testProjectDictLN_TCPhoton), -1, 1, 1, 1, 1, 0, "u 'TCPhoton' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncTCGenJet(void) {
   /* TCGenJet */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__testProjectDictLN_TCGenJet));
   G__memfunc_setup("TCGenJet",724,G__testProjectDict_481_0_1, 105, G__get_linked_tagnum(&G__testProjectDictLN_TCGenJet), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("TCGenJet",724,G__testProjectDict_481_0_2, 105, G__get_linked_tagnum(&G__testProjectDictLN_TCGenJet), -1, 0, 1, 1, 1, 0, "u 'TCGenJet' - 11 - -", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Class",502,G__testProjectDict_481_0_3, 85, G__get_linked_tagnum(&G__testProjectDictLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&TCGenJet::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__testProjectDict_481_0_4, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&TCGenJet::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__testProjectDict_481_0_5, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&TCGenJet::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__testProjectDict_481_0_6, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&TCGenJet::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__testProjectDictLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - insp", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - b", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__testProjectDict_481_0_10, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__testProjectDict_481_0_11, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&TCGenJet::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__testProjectDict_481_0_12, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&TCGenJet::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__testProjectDict_481_0_13, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&TCGenJet::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__testProjectDict_481_0_14, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&TCGenJet::DeclFileLine) ), 0);
   // automatic destructor
   G__memfunc_setup("~TCGenJet", 850, G__testProjectDict_481_0_15, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G__testProjectDict_481_0_16, (int) ('u'), G__get_linked_tagnum(&G__testProjectDictLN_TCGenJet), -1, 1, 1, 1, 1, 0, "u 'TCGenJet' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncTCGenParticle(void) {
   /* TCGenParticle */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__testProjectDictLN_TCGenParticle));
   G__memfunc_setup("TCGenParticle",1253,G__testProjectDict_482_0_1, 105, G__get_linked_tagnum(&G__testProjectDictLN_TCGenParticle), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("TCGenParticle",1253,G__testProjectDict_482_0_2, 105, G__get_linked_tagnum(&G__testProjectDictLN_TCGenParticle), -1, 0, 1, 1, 1, 0, "u 'TCGenParticle' - 11 - -", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Class",502,G__testProjectDict_482_0_3, 85, G__get_linked_tagnum(&G__testProjectDictLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&TCGenParticle::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__testProjectDict_482_0_4, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&TCGenParticle::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__testProjectDict_482_0_5, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&TCGenParticle::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__testProjectDict_482_0_6, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&TCGenParticle::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__testProjectDictLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - insp", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - b", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__testProjectDict_482_0_10, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__testProjectDict_482_0_11, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&TCGenParticle::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__testProjectDict_482_0_12, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&TCGenParticle::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__testProjectDict_482_0_13, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&TCGenParticle::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__testProjectDict_482_0_14, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&TCGenParticle::DeclFileLine) ), 0);
   // automatic destructor
   G__memfunc_setup("~TCGenParticle", 1379, G__testProjectDict_482_0_15, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G__testProjectDict_482_0_16, (int) ('u'), G__get_linked_tagnum(&G__testProjectDictLN_TCGenParticle), -1, 1, 1, 1, 1, 0, "u 'TCGenParticle' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncTCTriggerObject(void) {
   /* TCTriggerObject */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__testProjectDictLN_TCTriggerObject));
   G__memfunc_setup("TCTriggerObject",1474,G__testProjectDict_483_0_1, 105, G__get_linked_tagnum(&G__testProjectDictLN_TCTriggerObject), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("TCTriggerObject",1474,G__testProjectDict_483_0_2, 105, G__get_linked_tagnum(&G__testProjectDictLN_TCTriggerObject), -1, 0, 1, 1, 1, 0, "u 'TCTriggerObject' - 11 - -", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Class",502,G__testProjectDict_483_0_3, 85, G__get_linked_tagnum(&G__testProjectDictLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&TCTriggerObject::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__testProjectDict_483_0_4, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&TCTriggerObject::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__testProjectDict_483_0_5, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&TCTriggerObject::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__testProjectDict_483_0_6, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&TCTriggerObject::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__testProjectDictLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - insp", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - b", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__testProjectDict_483_0_10, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__testProjectDict_483_0_11, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&TCTriggerObject::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__testProjectDict_483_0_12, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&TCTriggerObject::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__testProjectDict_483_0_13, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&TCTriggerObject::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__testProjectDict_483_0_14, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&TCTriggerObject::DeclFileLine) ), 0);
   // automatic destructor
   G__memfunc_setup("~TCTriggerObject", 1600, G__testProjectDict_483_0_15, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G__testProjectDict_483_0_16, (int) ('u'), G__get_linked_tagnum(&G__testProjectDictLN_TCTriggerObject), -1, 1, 1, 1, 1, 0, "u 'TCTriggerObject' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncTCPrimaryVtx(void) {
   /* TCPrimaryVtx */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__testProjectDictLN_TCPrimaryVtx));
   G__memfunc_setup("TCPrimaryVtx",1213,G__testProjectDict_484_0_1, 105, G__get_linked_tagnum(&G__testProjectDictLN_TCPrimaryVtx), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("TCPrimaryVtx",1213,G__testProjectDict_484_0_2, 105, G__get_linked_tagnum(&G__testProjectDictLN_TCPrimaryVtx), -1, 0, 1, 1, 1, 0, "u 'TCPrimaryVtx' - 11 - -", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Class",502,G__testProjectDict_484_0_3, 85, G__get_linked_tagnum(&G__testProjectDictLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&TCPrimaryVtx::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__testProjectDict_484_0_4, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&TCPrimaryVtx::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__testProjectDict_484_0_5, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&TCPrimaryVtx::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__testProjectDict_484_0_6, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&TCPrimaryVtx::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__testProjectDictLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - insp", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - b", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__testProjectDict_484_0_10, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__testProjectDict_484_0_11, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&TCPrimaryVtx::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__testProjectDict_484_0_12, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&TCPrimaryVtx::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__testProjectDict_484_0_13, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&TCPrimaryVtx::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__testProjectDict_484_0_14, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&TCPrimaryVtx::DeclFileLine) ), 0);
   // automatic destructor
   G__memfunc_setup("~TCPrimaryVtx", 1339, G__testProjectDict_484_0_15, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G__testProjectDict_484_0_16, (int) ('u'), G__get_linked_tagnum(&G__testProjectDictLN_TCPrimaryVtx), -1, 1, 1, 1, 1, 0, "u 'TCPrimaryVtx' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}


/*********************************************************
* Member function information setup
*********************************************************/
extern "C" void G__cpp_setup_memfunctestProjectDict() {
}

/*********************************************************
* Global variable information setup for each class
*********************************************************/
static void G__cpp_setup_global0() {

   /* Setting up global variables */
   G__resetplocal();

}

static void G__cpp_setup_global1() {
}

static void G__cpp_setup_global2() {

   G__resetglobalenv();
}
extern "C" void G__cpp_setup_globaltestProjectDict() {
  G__cpp_setup_global0();
  G__cpp_setup_global1();
  G__cpp_setup_global2();
}

/*********************************************************
* Global function information setup for each class
*********************************************************/
static void G__cpp_setup_func0() {
   G__lastifuncposition();

}

static void G__cpp_setup_func1() {
}

static void G__cpp_setup_func2() {
}

static void G__cpp_setup_func3() {
}

static void G__cpp_setup_func4() {
}

static void G__cpp_setup_func5() {
}

static void G__cpp_setup_func6() {
}

static void G__cpp_setup_func7() {
}

static void G__cpp_setup_func8() {
}

static void G__cpp_setup_func9() {
}

static void G__cpp_setup_func10() {
}

static void G__cpp_setup_func11() {
}

static void G__cpp_setup_func12() {
}

static void G__cpp_setup_func13() {
}

static void G__cpp_setup_func14() {
}

static void G__cpp_setup_func15() {
}

static void G__cpp_setup_func16() {
}

static void G__cpp_setup_func17() {
}

static void G__cpp_setup_func18() {
}

static void G__cpp_setup_func19() {

   G__resetifuncposition();
}

extern "C" void G__cpp_setup_functestProjectDict() {
  G__cpp_setup_func0();
  G__cpp_setup_func1();
  G__cpp_setup_func2();
  G__cpp_setup_func3();
  G__cpp_setup_func4();
  G__cpp_setup_func5();
  G__cpp_setup_func6();
  G__cpp_setup_func7();
  G__cpp_setup_func8();
  G__cpp_setup_func9();
  G__cpp_setup_func10();
  G__cpp_setup_func11();
  G__cpp_setup_func12();
  G__cpp_setup_func13();
  G__cpp_setup_func14();
  G__cpp_setup_func15();
  G__cpp_setup_func16();
  G__cpp_setup_func17();
  G__cpp_setup_func18();
  G__cpp_setup_func19();
}

/*********************************************************
* Class,struct,union,enum tag information setup
*********************************************************/
/* Setup class/struct taginfo */
G__linked_taginfo G__testProjectDictLN_TClass = { "TClass" , 99 , -1 };
G__linked_taginfo G__testProjectDictLN_TBuffer = { "TBuffer" , 99 , -1 };
G__linked_taginfo G__testProjectDictLN_TMemberInspector = { "TMemberInspector" , 99 , -1 };
G__linked_taginfo G__testProjectDictLN_TObject = { "TObject" , 99 , -1 };
G__linked_taginfo G__testProjectDictLN_vectorlEfloatcOallocatorlEfloatgRsPgR = { "vector<float,allocator<float> >" , 99 , -1 };
G__linked_taginfo G__testProjectDictLN_string = { "string" , 99 , -1 };
G__linked_taginfo G__testProjectDictLN_vectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgR = { "vector<ROOT::TSchemaHelper,allocator<ROOT::TSchemaHelper> >" , 99 , -1 };
G__linked_taginfo G__testProjectDictLN_reverse_iteratorlEvectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgRcLcLiteratorgR = { "reverse_iterator<vector<ROOT::TSchemaHelper,allocator<ROOT::TSchemaHelper> >::iterator>" , 99 , -1 };
G__linked_taginfo G__testProjectDictLN_vectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgR = { "vector<TVirtualArray*,allocator<TVirtualArray*> >" , 99 , -1 };
G__linked_taginfo G__testProjectDictLN_reverse_iteratorlEvectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgRcLcLiteratorgR = { "reverse_iterator<vector<TVirtualArray*,allocator<TVirtualArray*> >::iterator>" , 99 , -1 };
G__linked_taginfo G__testProjectDictLN_TCMET = { "TCMET" , 99 , -1 };
G__linked_taginfo G__testProjectDictLN_TVector2 = { "TVector2" , 99 , -1 };
G__linked_taginfo G__testProjectDictLN_TCJet = { "TCJet" , 99 , -1 };
G__linked_taginfo G__testProjectDictLN_TCPhysObject = { "TCPhysObject" , 99 , -1 };
G__linked_taginfo G__testProjectDictLN_TMatrixTBaselEfloatgR = { "TMatrixTBase<float>" , 99 , -1 };
G__linked_taginfo G__testProjectDictLN_TMatrixTBaselEdoublegR = { "TMatrixTBase<double>" , 99 , -1 };
G__linked_taginfo G__testProjectDictLN_TVectorTlEfloatgR = { "TVectorT<float>" , 99 , -1 };
G__linked_taginfo G__testProjectDictLN_TVectorTlEdoublegR = { "TVectorT<double>" , 99 , -1 };
G__linked_taginfo G__testProjectDictLN_TElementActionTlEfloatgR = { "TElementActionT<float>" , 99 , -1 };
G__linked_taginfo G__testProjectDictLN_TElementPosActionTlEfloatgR = { "TElementPosActionT<float>" , 99 , -1 };
G__linked_taginfo G__testProjectDictLN_TMatrixTlEfloatgR = { "TMatrixT<float>" , 99 , -1 };
G__linked_taginfo G__testProjectDictLN_TMatrixTRow_constlEfloatgR = { "TMatrixTRow_const<float>" , 99 , -1 };
G__linked_taginfo G__testProjectDictLN_TMatrixTRowlEfloatgR = { "TMatrixTRow<float>" , 99 , -1 };
G__linked_taginfo G__testProjectDictLN_TMatrixTDiag_constlEfloatgR = { "TMatrixTDiag_const<float>" , 99 , -1 };
G__linked_taginfo G__testProjectDictLN_TMatrixTColumn_constlEfloatgR = { "TMatrixTColumn_const<float>" , 99 , -1 };
G__linked_taginfo G__testProjectDictLN_TMatrixTFlat_constlEfloatgR = { "TMatrixTFlat_const<float>" , 99 , -1 };
G__linked_taginfo G__testProjectDictLN_TMatrixTSub_constlEfloatgR = { "TMatrixTSub_const<float>" , 99 , -1 };
G__linked_taginfo G__testProjectDictLN_TMatrixTSparseRow_constlEfloatgR = { "TMatrixTSparseRow_const<float>" , 99 , -1 };
G__linked_taginfo G__testProjectDictLN_TMatrixTSparseDiag_constlEfloatgR = { "TMatrixTSparseDiag_const<float>" , 99 , -1 };
G__linked_taginfo G__testProjectDictLN_TMatrixTColumnlEfloatgR = { "TMatrixTColumn<float>" , 99 , -1 };
G__linked_taginfo G__testProjectDictLN_TMatrixTDiaglEfloatgR = { "TMatrixTDiag<float>" , 99 , -1 };
G__linked_taginfo G__testProjectDictLN_TMatrixTFlatlEfloatgR = { "TMatrixTFlat<float>" , 99 , -1 };
G__linked_taginfo G__testProjectDictLN_TMatrixTSublEfloatgR = { "TMatrixTSub<float>" , 99 , -1 };
G__linked_taginfo G__testProjectDictLN_TMatrixTSparseRowlEfloatgR = { "TMatrixTSparseRow<float>" , 99 , -1 };
G__linked_taginfo G__testProjectDictLN_TMatrixTSparseDiaglEfloatgR = { "TMatrixTSparseDiag<float>" , 99 , -1 };
G__linked_taginfo G__testProjectDictLN_TVector3 = { "TVector3" , 99 , -1 };
G__linked_taginfo G__testProjectDictLN_TLorentzVector = { "TLorentzVector" , 99 , -1 };
G__linked_taginfo G__testProjectDictLN_pairlEstringcOfloatgR = { "pair<string,float>" , 115 , -1 };
G__linked_taginfo G__testProjectDictLN_vectorlEpairlEstringcOfloatgRcOallocatorlEpairlEstringcOfloatgRsPgRsPgR = { "vector<pair<string,float>,allocator<pair<string,float> > >" , 99 , -1 };
G__linked_taginfo G__testProjectDictLN_reverse_iteratorlEvectorlEpairlEstringcOfloatgRcOallocatorlEpairlEstringcOfloatgRsPgRsPgRcLcLiteratorgR = { "reverse_iterator<vector<pair<string,float>,allocator<pair<string,float> > >::iterator>" , 99 , -1 };
G__linked_taginfo G__testProjectDictLN_TCElectron = { "TCElectron" , 99 , -1 };
G__linked_taginfo G__testProjectDictLN_TCEGamma = { "TCEGamma" , 99 , -1 };
G__linked_taginfo G__testProjectDictLN_TCEGammacLcLCrystalInfo = { "TCEGamma::CrystalInfo" , 99 , -1 };
G__linked_taginfo G__testProjectDictLN_vectorlETCEGammacLcLCrystalInfocOallocatorlETCEGammacLcLCrystalInfogRsPgR = { "vector<TCEGamma::CrystalInfo,allocator<TCEGamma::CrystalInfo> >" , 99 , -1 };
G__linked_taginfo G__testProjectDictLN_reverse_iteratorlEvectorlETCEGammacLcLCrystalInfocOallocatorlETCEGammacLcLCrystalInfogRsPgRcLcLiteratorgR = { "reverse_iterator<vector<TCEGamma::CrystalInfo,allocator<TCEGamma::CrystalInfo> >::iterator>" , 99 , -1 };
G__linked_taginfo G__testProjectDictLN_TCElectroncLcLHitInfo = { "TCElectron::HitInfo" , 99 , -1 };
G__linked_taginfo G__testProjectDictLN_vectorlETCElectroncLcLHitInfocOallocatorlETCElectroncLcLHitInfogRsPgR = { "vector<TCElectron::HitInfo,allocator<TCElectron::HitInfo> >" , 99 , -1 };
G__linked_taginfo G__testProjectDictLN_reverse_iteratorlEvectorlETCElectroncLcLHitInfocOallocatorlETCElectroncLcLHitInfogRsPgRcLcLiteratorgR = { "reverse_iterator<vector<TCElectron::HitInfo,allocator<TCElectron::HitInfo> >::iterator>" , 99 , -1 };
G__linked_taginfo G__testProjectDictLN_TCMuon = { "TCMuon" , 99 , -1 };
G__linked_taginfo G__testProjectDictLN_TCPhoton = { "TCPhoton" , 99 , -1 };
G__linked_taginfo G__testProjectDictLN_TCGenJet = { "TCGenJet" , 99 , -1 };
G__linked_taginfo G__testProjectDictLN_TCGenParticle = { "TCGenParticle" , 99 , -1 };
G__linked_taginfo G__testProjectDictLN_TCTriggerObject = { "TCTriggerObject" , 99 , -1 };
G__linked_taginfo G__testProjectDictLN_TCPrimaryVtx = { "TCPrimaryVtx" , 99 , -1 };

/* Reset class/struct taginfo */
extern "C" void G__cpp_reset_tagtabletestProjectDict() {
  G__testProjectDictLN_TClass.tagnum = -1 ;
  G__testProjectDictLN_TBuffer.tagnum = -1 ;
  G__testProjectDictLN_TMemberInspector.tagnum = -1 ;
  G__testProjectDictLN_TObject.tagnum = -1 ;
  G__testProjectDictLN_vectorlEfloatcOallocatorlEfloatgRsPgR.tagnum = -1 ;
  G__testProjectDictLN_string.tagnum = -1 ;
  G__testProjectDictLN_vectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgR.tagnum = -1 ;
  G__testProjectDictLN_reverse_iteratorlEvectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgRcLcLiteratorgR.tagnum = -1 ;
  G__testProjectDictLN_vectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgR.tagnum = -1 ;
  G__testProjectDictLN_reverse_iteratorlEvectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgRcLcLiteratorgR.tagnum = -1 ;
  G__testProjectDictLN_TCMET.tagnum = -1 ;
  G__testProjectDictLN_TVector2.tagnum = -1 ;
  G__testProjectDictLN_TCJet.tagnum = -1 ;
  G__testProjectDictLN_TCPhysObject.tagnum = -1 ;
  G__testProjectDictLN_TMatrixTBaselEfloatgR.tagnum = -1 ;
  G__testProjectDictLN_TMatrixTBaselEdoublegR.tagnum = -1 ;
  G__testProjectDictLN_TVectorTlEfloatgR.tagnum = -1 ;
  G__testProjectDictLN_TVectorTlEdoublegR.tagnum = -1 ;
  G__testProjectDictLN_TElementActionTlEfloatgR.tagnum = -1 ;
  G__testProjectDictLN_TElementPosActionTlEfloatgR.tagnum = -1 ;
  G__testProjectDictLN_TMatrixTlEfloatgR.tagnum = -1 ;
  G__testProjectDictLN_TMatrixTRow_constlEfloatgR.tagnum = -1 ;
  G__testProjectDictLN_TMatrixTRowlEfloatgR.tagnum = -1 ;
  G__testProjectDictLN_TMatrixTDiag_constlEfloatgR.tagnum = -1 ;
  G__testProjectDictLN_TMatrixTColumn_constlEfloatgR.tagnum = -1 ;
  G__testProjectDictLN_TMatrixTFlat_constlEfloatgR.tagnum = -1 ;
  G__testProjectDictLN_TMatrixTSub_constlEfloatgR.tagnum = -1 ;
  G__testProjectDictLN_TMatrixTSparseRow_constlEfloatgR.tagnum = -1 ;
  G__testProjectDictLN_TMatrixTSparseDiag_constlEfloatgR.tagnum = -1 ;
  G__testProjectDictLN_TMatrixTColumnlEfloatgR.tagnum = -1 ;
  G__testProjectDictLN_TMatrixTDiaglEfloatgR.tagnum = -1 ;
  G__testProjectDictLN_TMatrixTFlatlEfloatgR.tagnum = -1 ;
  G__testProjectDictLN_TMatrixTSublEfloatgR.tagnum = -1 ;
  G__testProjectDictLN_TMatrixTSparseRowlEfloatgR.tagnum = -1 ;
  G__testProjectDictLN_TMatrixTSparseDiaglEfloatgR.tagnum = -1 ;
  G__testProjectDictLN_TVector3.tagnum = -1 ;
  G__testProjectDictLN_TLorentzVector.tagnum = -1 ;
  G__testProjectDictLN_pairlEstringcOfloatgR.tagnum = -1 ;
  G__testProjectDictLN_vectorlEpairlEstringcOfloatgRcOallocatorlEpairlEstringcOfloatgRsPgRsPgR.tagnum = -1 ;
  G__testProjectDictLN_reverse_iteratorlEvectorlEpairlEstringcOfloatgRcOallocatorlEpairlEstringcOfloatgRsPgRsPgRcLcLiteratorgR.tagnum = -1 ;
  G__testProjectDictLN_TCElectron.tagnum = -1 ;
  G__testProjectDictLN_TCEGamma.tagnum = -1 ;
  G__testProjectDictLN_TCEGammacLcLCrystalInfo.tagnum = -1 ;
  G__testProjectDictLN_vectorlETCEGammacLcLCrystalInfocOallocatorlETCEGammacLcLCrystalInfogRsPgR.tagnum = -1 ;
  G__testProjectDictLN_reverse_iteratorlEvectorlETCEGammacLcLCrystalInfocOallocatorlETCEGammacLcLCrystalInfogRsPgRcLcLiteratorgR.tagnum = -1 ;
  G__testProjectDictLN_TCElectroncLcLHitInfo.tagnum = -1 ;
  G__testProjectDictLN_vectorlETCElectroncLcLHitInfocOallocatorlETCElectroncLcLHitInfogRsPgR.tagnum = -1 ;
  G__testProjectDictLN_reverse_iteratorlEvectorlETCElectroncLcLHitInfocOallocatorlETCElectroncLcLHitInfogRsPgRcLcLiteratorgR.tagnum = -1 ;
  G__testProjectDictLN_TCMuon.tagnum = -1 ;
  G__testProjectDictLN_TCPhoton.tagnum = -1 ;
  G__testProjectDictLN_TCGenJet.tagnum = -1 ;
  G__testProjectDictLN_TCGenParticle.tagnum = -1 ;
  G__testProjectDictLN_TCTriggerObject.tagnum = -1 ;
  G__testProjectDictLN_TCPrimaryVtx.tagnum = -1 ;
}


extern "C" void G__cpp_setup_tagtabletestProjectDict() {

   /* Setting up class,struct,union tag entry */
   G__get_linked_tagnum_fwd(&G__testProjectDictLN_TClass);
   G__get_linked_tagnum_fwd(&G__testProjectDictLN_TBuffer);
   G__get_linked_tagnum_fwd(&G__testProjectDictLN_TMemberInspector);
   G__get_linked_tagnum_fwd(&G__testProjectDictLN_TObject);
   G__get_linked_tagnum_fwd(&G__testProjectDictLN_vectorlEfloatcOallocatorlEfloatgRsPgR);
   G__get_linked_tagnum_fwd(&G__testProjectDictLN_string);
   G__get_linked_tagnum_fwd(&G__testProjectDictLN_vectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgR);
   G__get_linked_tagnum_fwd(&G__testProjectDictLN_reverse_iteratorlEvectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgRcLcLiteratorgR);
   G__get_linked_tagnum_fwd(&G__testProjectDictLN_vectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgR);
   G__get_linked_tagnum_fwd(&G__testProjectDictLN_reverse_iteratorlEvectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgRcLcLiteratorgR);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__testProjectDictLN_TCMET),sizeof(TCMET),-1,325376,"Generated by MakeProject.",G__setup_memvarTCMET,G__setup_memfuncTCMET);
   G__get_linked_tagnum_fwd(&G__testProjectDictLN_TVector2);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__testProjectDictLN_TCJet),sizeof(TCJet),-1,325376,"Generated by MakeProject.",G__setup_memvarTCJet,G__setup_memfuncTCJet);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__testProjectDictLN_TCPhysObject),sizeof(TCPhysObject),-1,325376,"Generated by MakeProject.",G__setup_memvarTCPhysObject,G__setup_memfuncTCPhysObject);
   G__get_linked_tagnum_fwd(&G__testProjectDictLN_TMatrixTBaselEfloatgR);
   G__get_linked_tagnum_fwd(&G__testProjectDictLN_TMatrixTBaselEdoublegR);
   G__get_linked_tagnum_fwd(&G__testProjectDictLN_TVectorTlEfloatgR);
   G__get_linked_tagnum_fwd(&G__testProjectDictLN_TVectorTlEdoublegR);
   G__get_linked_tagnum_fwd(&G__testProjectDictLN_TElementActionTlEfloatgR);
   G__get_linked_tagnum_fwd(&G__testProjectDictLN_TElementPosActionTlEfloatgR);
   G__get_linked_tagnum_fwd(&G__testProjectDictLN_TMatrixTlEfloatgR);
   G__get_linked_tagnum_fwd(&G__testProjectDictLN_TMatrixTRow_constlEfloatgR);
   G__get_linked_tagnum_fwd(&G__testProjectDictLN_TMatrixTRowlEfloatgR);
   G__get_linked_tagnum_fwd(&G__testProjectDictLN_TMatrixTDiag_constlEfloatgR);
   G__get_linked_tagnum_fwd(&G__testProjectDictLN_TMatrixTColumn_constlEfloatgR);
   G__get_linked_tagnum_fwd(&G__testProjectDictLN_TMatrixTFlat_constlEfloatgR);
   G__get_linked_tagnum_fwd(&G__testProjectDictLN_TMatrixTSub_constlEfloatgR);
   G__get_linked_tagnum_fwd(&G__testProjectDictLN_TMatrixTSparseRow_constlEfloatgR);
   G__get_linked_tagnum_fwd(&G__testProjectDictLN_TMatrixTSparseDiag_constlEfloatgR);
   G__get_linked_tagnum_fwd(&G__testProjectDictLN_TMatrixTColumnlEfloatgR);
   G__get_linked_tagnum_fwd(&G__testProjectDictLN_TMatrixTDiaglEfloatgR);
   G__get_linked_tagnum_fwd(&G__testProjectDictLN_TMatrixTFlatlEfloatgR);
   G__get_linked_tagnum_fwd(&G__testProjectDictLN_TMatrixTSublEfloatgR);
   G__get_linked_tagnum_fwd(&G__testProjectDictLN_TMatrixTSparseRowlEfloatgR);
   G__get_linked_tagnum_fwd(&G__testProjectDictLN_TMatrixTSparseDiaglEfloatgR);
   G__get_linked_tagnum_fwd(&G__testProjectDictLN_TVector3);
   G__get_linked_tagnum_fwd(&G__testProjectDictLN_TLorentzVector);
   G__get_linked_tagnum_fwd(&G__testProjectDictLN_pairlEstringcOfloatgR);
   G__get_linked_tagnum_fwd(&G__testProjectDictLN_vectorlEpairlEstringcOfloatgRcOallocatorlEpairlEstringcOfloatgRsPgRsPgR);
   G__get_linked_tagnum_fwd(&G__testProjectDictLN_reverse_iteratorlEvectorlEpairlEstringcOfloatgRcOallocatorlEpairlEstringcOfloatgRsPgRsPgRcLcLiteratorgR);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__testProjectDictLN_TCElectron),sizeof(TCElectron),-1,325376,"Generated by MakeProject.",G__setup_memvarTCElectron,G__setup_memfuncTCElectron);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__testProjectDictLN_TCEGamma),sizeof(TCEGamma),-1,325376,"Generated by MakeProject.",G__setup_memvarTCEGamma,G__setup_memfuncTCEGamma);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__testProjectDictLN_TCEGammacLcLCrystalInfo),sizeof(TCEGamma::CrystalInfo),-1,263936,(char*)NULL,G__setup_memvarTCEGammacLcLCrystalInfo,G__setup_memfuncTCEGammacLcLCrystalInfo);
   G__get_linked_tagnum_fwd(&G__testProjectDictLN_vectorlETCEGammacLcLCrystalInfocOallocatorlETCEGammacLcLCrystalInfogRsPgR);
   G__get_linked_tagnum_fwd(&G__testProjectDictLN_reverse_iteratorlEvectorlETCEGammacLcLCrystalInfocOallocatorlETCEGammacLcLCrystalInfogRsPgRcLcLiteratorgR);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__testProjectDictLN_TCElectroncLcLHitInfo),sizeof(TCElectron::HitInfo),-1,263936,(char*)NULL,G__setup_memvarTCElectroncLcLHitInfo,G__setup_memfuncTCElectroncLcLHitInfo);
   G__get_linked_tagnum_fwd(&G__testProjectDictLN_vectorlETCElectroncLcLHitInfocOallocatorlETCElectroncLcLHitInfogRsPgR);
   G__get_linked_tagnum_fwd(&G__testProjectDictLN_reverse_iteratorlEvectorlETCElectroncLcLHitInfocOallocatorlETCElectroncLcLHitInfogRsPgRcLcLiteratorgR);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__testProjectDictLN_TCMuon),sizeof(TCMuon),-1,325376,"Generated by MakeProject.",G__setup_memvarTCMuon,G__setup_memfuncTCMuon);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__testProjectDictLN_TCPhoton),sizeof(TCPhoton),-1,325376,"Generated by MakeProject.",G__setup_memvarTCPhoton,G__setup_memfuncTCPhoton);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__testProjectDictLN_TCGenJet),sizeof(TCGenJet),-1,325376,"Generated by MakeProject.",G__setup_memvarTCGenJet,G__setup_memfuncTCGenJet);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__testProjectDictLN_TCGenParticle),sizeof(TCGenParticle),-1,325376,"Generated by MakeProject.",G__setup_memvarTCGenParticle,G__setup_memfuncTCGenParticle);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__testProjectDictLN_TCTriggerObject),sizeof(TCTriggerObject),-1,325376,"Generated by MakeProject.",G__setup_memvarTCTriggerObject,G__setup_memfuncTCTriggerObject);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__testProjectDictLN_TCPrimaryVtx),sizeof(TCPrimaryVtx),-1,325376,"Generated by MakeProject.",G__setup_memvarTCPrimaryVtx,G__setup_memfuncTCPrimaryVtx);
}
extern "C" void G__cpp_setuptestProjectDict(void) {
  G__check_setup_version(30051515,"G__cpp_setuptestProjectDict()");
  G__set_cpp_environmenttestProjectDict();
  G__cpp_setup_tagtabletestProjectDict();

  G__cpp_setup_inheritancetestProjectDict();

  G__cpp_setup_typetabletestProjectDict();

  G__cpp_setup_memvartestProjectDict();

  G__cpp_setup_memfunctestProjectDict();
  G__cpp_setup_globaltestProjectDict();
  G__cpp_setup_functestProjectDict();

   if(0==G__getsizep2memfunc()) G__get_sizep2memfunctestProjectDict();
  return;
}
class G__cpp_setup_inittestProjectDict {
  public:
    G__cpp_setup_inittestProjectDict() { G__add_setup_func("testProjectDict",(G__incsetup)(&G__cpp_setuptestProjectDict)); G__call_setup_funcs(); }
   ~G__cpp_setup_inittestProjectDict() { G__remove_setup_func("testProjectDict"); }
};
G__cpp_setup_inittestProjectDict G__cpp_setup_initializertestProjectDict;

